{-# OPTIONS --safe #-}

open import Level renaming (zero to ‚Ñì-zero; suc to ‚Ñì-suc; _‚äî_ to ‚Ñì-max)
open import Data.Empty
open import Data.Unit
open import Data.Product renaming (proj‚ÇÅ to fst; proj‚ÇÇ to snd) hiding (map; _<*>_)
open import Data.Product.Properties
open import Data.Bool
open import Data.Bool.Properties renaming (_‚âü_ to ‚â°-dec-Bool)
open import Data.Nat hiding (_‚äî_) renaming (_‚âü_ to ‚â°-dec-‚Ñï)
open import Data.List
open import Data.List.Properties
open import Data.Maybe renaming (map to mmap)
open import Data.Sum renaming (inj‚ÇÅ to inl; inj‚ÇÇ to inr) hiding (map)
open import Relation.Nullary
open import Relation.Binary hiding (_‚áí_)
open import Relation.Binary.PropositionalEquality
open import Function

open ‚â°-Reasoning

open import Common
open import Common
open import KindSignatures
open import TypeSignatures
open import TypeContexts
open import Types
open import Kinding
open import TypeEquality
open import TermEquality
open import PolyPir.LocalLang

module PolyPir.ChorEquality
  -- Location values
  (Loc : Set)
  -- Locations should have decidable equality
  (‚â°-dec-Loc : DecidableEquality Loc)

  -- Local language
  (ùïÉ : LocalLang Loc)
  where

open import PolyPir.ChorTypes Loc ‚â°-dec-Loc ùïÉ
open import PolyPir.ChorTerms Loc ‚â°-dec-Loc ùïÉ

‚â°-dec-ChorKnd : DecidableEquality ChorKnd
‚â°-dec-ChorKnd (LocKnd Œ∫1‚Çë) (LocKnd Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong LocKnd p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) (Bnd Œ∫‚Çë‚ÇÅ) = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) * = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) *‚Çó = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) (LocKnd Œ∫‚Çë‚ÇÅ) = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫1‚Çë) (Bnd Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong Bnd p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) * = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) *‚Çó = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd * (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd * (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd * * = yes refl
‚â°-dec-ChorKnd * *‚Çó = no (Œª ())
‚â°-dec-ChorKnd * *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd *‚Çó (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çó (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çó * = no (Œª ())
‚â°-dec-ChorKnd *‚Çó *‚Çó = yes refl
‚â°-dec-ChorKnd *‚Çó *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ * = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ *‚Çó = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ *‚Çõ = yes refl

‚â°-dec-ChorTySymb : DecidableEquality ChorTySymb
‚â°-dec-ChorTySymb (EmbLocalTyS s1‚Çë) (EmbLocalTyS s2‚Çë)
  with ùïÉ .‚â°-dec-TySymb‚Çë s1‚Çë s2‚Çë
... | yes p = yes $ cong EmbLocalTyS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) AtS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) FunS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) SngS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) UnionS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫1‚Çë) (LocalS Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong LocalS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) AtS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) FunS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) SngS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) UnionS = no (Œª ())
‚â°-dec-ChorTySymb AtS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb AtS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb AtS AtS = yes refl
‚â°-dec-ChorTySymb AtS FunS = no (Œª ())
‚â°-dec-ChorTySymb AtS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb AtS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb AtS EmpS = no (Œª ())
‚â°-dec-ChorTySymb AtS SngS = no (Œª ())
‚â°-dec-ChorTySymb AtS UnionS = no (Œª ())
‚â°-dec-ChorTySymb FunS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb FunS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb FunS AtS = no (Œª ())
‚â°-dec-ChorTySymb FunS FunS = yes refl
‚â°-dec-ChorTySymb FunS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb FunS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb FunS EmpS = no (Œª ())
‚â°-dec-ChorTySymb FunS SngS = no (Œª ())
‚â°-dec-ChorTySymb FunS UnionS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) AtS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) FunS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫1 ‚àÄŒ∫1) (AllS Œ∫2 ‚àÄŒ∫2) with ‚â°-dec-ChorKnd Œ∫1 Œ∫2
... | yes refl = yes $ cong (AllS Œ∫1) $ canAbstract-isProp Œ∫1 ‚àÄŒ∫1 ‚àÄŒ∫2
... | no  ¬¨p   = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) SngS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) UnionS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) AtS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) FunS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L1) (LitLocS L2) with ‚â°-dec-Loc L1 L2
... | yes p = yes $ cong LitLocS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (LitLocS L) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) SngS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) UnionS = no (Œª ())
‚â°-dec-ChorTySymb EmpS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb EmpS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb EmpS AtS = no (Œª ())
‚â°-dec-ChorTySymb EmpS FunS = no (Œª ())
‚â°-dec-ChorTySymb EmpS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb EmpS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb EmpS EmpS = yes refl
‚â°-dec-ChorTySymb EmpS SngS = no (Œª ())
‚â°-dec-ChorTySymb EmpS UnionS = no (Œª ())
‚â°-dec-ChorTySymb SngS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb SngS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb SngS AtS = no (Œª ())
‚â°-dec-ChorTySymb SngS FunS = no (Œª ())
‚â°-dec-ChorTySymb SngS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb SngS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb SngS EmpS = no (Œª ())
‚â°-dec-ChorTySymb SngS SngS = yes refl
‚â°-dec-ChorTySymb SngS UnionS = no (Œª ())
‚â°-dec-ChorTySymb UnionS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb UnionS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb UnionS AtS = no (Œª ())
‚â°-dec-ChorTySymb UnionS FunS = no (Œª ())
‚â°-dec-ChorTySymb UnionS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb UnionS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb UnionS EmpS = no (Œª ())
‚â°-dec-ChorTySymb UnionS SngS = no (Œª ())
‚â°-dec-ChorTySymb UnionS UnionS = yes refl

‚â°-dec-CTy : DecidableEquality CTy
‚â°-dec-CTy = ‚â°-dec-Ty C‚ÖÄ‚Çñ ‚â°-dec-ChorTySymb

‚â°-dec-ChorTmSymb : DecidableEquality ChorTmSymb
‚â°-dec-ChorTmSymb (LocalTmS s1‚Çë) (LocalTmS s2‚Çë) with ùïÉ .‚â°-dec-TmSymb‚Çë s1‚Çë s2‚Çë
... | yes refl = yes refl
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) DoneS = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) LamS = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) FixS = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) AppS = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) SendS = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) ITES = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb (LocalTmS s‚Çë) TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb DoneS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb DoneS DoneS = yes refl
‚â°-dec-ChorTmSymb DoneS LamS = no (Œª ())
‚â°-dec-ChorTmSymb DoneS FixS = no (Œª ())
‚â°-dec-ChorTmSymb DoneS AppS = no (Œª ())
‚â°-dec-ChorTmSymb DoneS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb DoneS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb DoneS SendS = no (Œª ())
‚â°-dec-ChorTmSymb DoneS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb DoneS ITES = no (Œª ())
‚â°-dec-ChorTmSymb DoneS LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb DoneS TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb DoneS TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb LamS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb LamS DoneS = no (Œª ())
‚â°-dec-ChorTmSymb LamS LamS = yes refl
‚â°-dec-ChorTmSymb LamS FixS = no (Œª ())
‚â°-dec-ChorTmSymb LamS AppS = no (Œª ())
‚â°-dec-ChorTmSymb LamS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb LamS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb LamS SendS = no (Œª ())
‚â°-dec-ChorTmSymb LamS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb LamS ITES = no (Œª ())
‚â°-dec-ChorTmSymb LamS LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb LamS TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb LamS TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb FixS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb FixS DoneS = no (Œª ())
‚â°-dec-ChorTmSymb FixS LamS = no (Œª ())
‚â°-dec-ChorTmSymb FixS FixS = yes refl
‚â°-dec-ChorTmSymb FixS AppS = no (Œª ())
‚â°-dec-ChorTmSymb FixS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb FixS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb FixS SendS = no (Œª ())
‚â°-dec-ChorTmSymb FixS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb FixS ITES = no (Œª ())
‚â°-dec-ChorTmSymb FixS LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb FixS TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb FixS TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb AppS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb AppS DoneS = no (Œª ())
‚â°-dec-ChorTmSymb AppS LamS = no (Œª ())
‚â°-dec-ChorTmSymb AppS FixS = no (Œª ())
‚â°-dec-ChorTmSymb AppS AppS = yes refl
‚â°-dec-ChorTmSymb AppS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb AppS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb AppS SendS = no (Œª ())
‚â°-dec-ChorTmSymb AppS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb AppS ITES = no (Œª ())
‚â°-dec-ChorTmSymb AppS LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb AppS TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb AppS TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) DoneS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) LamS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) FixS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) AppS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫1 ‚àÄŒ∫1) (AbsS Œ∫2 ‚àÄŒ∫2) with ‚â°-dec-ChorKnd Œ∫1 Œ∫2
... | yes refl = yes (cong (AbsS Œ∫1) (canAbstract-isProp Œ∫1 ‚àÄŒ∫1 ‚àÄŒ∫2))
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) (AppTyS Œ∫‚ÇÅ ‚àÄŒ∫‚ÇÅ) = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) SendS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) ITES = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb (AbsS Œ∫ ‚àÄŒ∫) TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) DoneS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) LamS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) FixS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) AppS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) (AbsS Œ∫‚ÇÅ ‚àÄŒ∫‚ÇÅ) = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫1 ‚àÄŒ∫1) (AppTyS Œ∫2 ‚àÄŒ∫2) with ‚â°-dec-ChorKnd Œ∫1 Œ∫2
... | yes refl = yes (cong (AppTyS Œ∫1) (canAbstract-isProp Œ∫1 ‚àÄŒ∫1 ‚àÄŒ∫2))
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) SendS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) ITES = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb (AppTyS Œ∫ ‚àÄŒ∫) TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb SendS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb SendS DoneS = no (Œª ())
‚â°-dec-ChorTmSymb SendS LamS = no (Œª ())
‚â°-dec-ChorTmSymb SendS FixS = no (Œª ())
‚â°-dec-ChorTmSymb SendS AppS = no (Œª ())
‚â°-dec-ChorTmSymb SendS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb SendS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb SendS SendS = yes refl
‚â°-dec-ChorTmSymb SendS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb SendS ITES = no (Œª ())
‚â°-dec-ChorTmSymb SendS LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb SendS TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb SendS TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) DoneS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) LamS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) FixS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) AppS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) SendS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d1) (SyncS d2) with ‚â°-dec-Bool d1 d2
... | yes refl = yes refl
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTmSymb (SyncS d) ITES = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb (SyncS d) TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb ITES (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb ITES DoneS = no (Œª ())
‚â°-dec-ChorTmSymb ITES LamS = no (Œª ())
‚â°-dec-ChorTmSymb ITES FixS = no (Œª ())
‚â°-dec-ChorTmSymb ITES AppS = no (Œª ())
‚â°-dec-ChorTmSymb ITES (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb ITES (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb ITES SendS = no (Œª ())
‚â°-dec-ChorTmSymb ITES (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb ITES ITES = yes refl
‚â°-dec-ChorTmSymb ITES LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb ITES TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb ITES TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS DoneS = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS LamS = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS FixS = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS AppS = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS SendS = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS ITES = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS LocalLetS = yes refl
‚â°-dec-ChorTmSymb LocalLetS TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb LocalLetS TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS DoneS = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS LamS = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS FixS = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS AppS = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS SendS = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS ITES = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb TellTyS TellTyS = yes refl
‚â°-dec-ChorTmSymb TellTyS TellLocS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS (LocalTmS s‚Çë) = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS DoneS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS LamS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS FixS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS AppS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS (AbsS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS (AppTyS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS SendS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS (SyncS d) = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS ITES = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS LocalLetS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS TellTyS = no (Œª ())
‚â°-dec-ChorTmSymb TellLocS TellLocS = yes refl

‚â°-dec-CTm : DecidableEquality CTm
‚â°-dec-CTm = ‚â°-dec-Tm C‚ÖÄ ‚â°-dec-ChorTySymb ‚â°-dec-ChorTmSymb
