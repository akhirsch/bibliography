{-# OPTIONS --safe #-}

open import Level renaming (zero to ‚Ñì-zero; suc to ‚Ñì-suc)
open import Data.Empty
open import Data.Unit
open import Data.Bool
open import Data.Product renaming (proj‚ÇÅ to fst; proj‚ÇÇ to snd) hiding (map)
open import Data.Product.Properties
open import Data.Bool
open import Data.Nat
open import Data.List
open import Data.List.Properties
open import Data.Maybe renaming (map to mmap)
open import Data.Sum renaming (inj‚ÇÅ to inl; inj‚ÇÇ to inr) hiding (map)
open import Relation.Nullary
open import Relation.Nullary.Decidable hiding (map)
open import Relation.Binary hiding (_‚áí_)
open import Relation.Binary.PropositionalEquality
open import Function

open ‚â°-Reasoning

open import Common
open import Common
open import KindSignatures
open import TypeSignatures
open import TypeContexts
open import Types
open import Kinding
open import Terms
open import Typing
open import TypeEquality
open import PolyPir.LocalLang

module PolyPir.TermOperations
  -- Location values
  (Loc : Set)
  -- Locations should have decidable equality
  (‚â°-dec-Loc : DecidableEquality Loc)

  -- Local language
  (ùïÉ : LocalLang Loc)
  where

open import PolyPir.ChorTypes Loc ‚â°-dec-Loc ùïÉ
open import PolyPir.TypeOperations Loc ‚â°-dec-Loc ùïÉ
open import PolyPir.ChorTerms Loc ‚â°-dec-Loc ùïÉ

‚â°-dec-ChorKnd : DecidableEquality ChorKnd
‚â°-dec-ChorKnd (LocKnd Œ∫1‚Çë) (LocKnd Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong LocKnd p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) (Bnd Œ∫‚Çë‚ÇÅ) = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) * = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) *‚Çó = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) (LocKnd Œ∫‚Çë‚ÇÅ) = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫1‚Çë) (Bnd Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong Bnd p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) * = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) *‚Çó = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd * (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd * (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd * * = yes refl
‚â°-dec-ChorKnd * *‚Çó = no (Œª ())
‚â°-dec-ChorKnd * *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd *‚Çó (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çó (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çó * = no (Œª ())
‚â°-dec-ChorKnd *‚Çó *‚Çó = yes refl
‚â°-dec-ChorKnd *‚Çó *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ * = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ *‚Çó = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ *‚Çõ = yes refl

‚â°-dec-ChorTySymb : DecidableEquality ChorTySymb
‚â°-dec-ChorTySymb (EmbLocalTyS s1‚Çë) (EmbLocalTyS s2‚Çë)
  with ùïÉ .‚â°-dec-TySymb‚Çë s1‚Çë s2‚Çë
... | yes p = yes $ cong EmbLocalTyS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) AtS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) FunS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) SngS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) UnionS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫1‚Çë) (LocalS Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong LocalS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) AtS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) FunS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) SngS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) UnionS = no (Œª ())
‚â°-dec-ChorTySymb AtS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb AtS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb AtS AtS = yes refl
‚â°-dec-ChorTySymb AtS FunS = no (Œª ())
‚â°-dec-ChorTySymb AtS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb AtS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb AtS EmpS = no (Œª ())
‚â°-dec-ChorTySymb AtS SngS = no (Œª ())
‚â°-dec-ChorTySymb AtS UnionS = no (Œª ())
‚â°-dec-ChorTySymb FunS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb FunS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb FunS AtS = no (Œª ())
‚â°-dec-ChorTySymb FunS FunS = yes refl
‚â°-dec-ChorTySymb FunS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb FunS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb FunS EmpS = no (Œª ())
‚â°-dec-ChorTySymb FunS SngS = no (Œª ())
‚â°-dec-ChorTySymb FunS UnionS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) AtS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) FunS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫1 ‚àÄŒ∫1) (AllS Œ∫2 ‚àÄŒ∫2) with ‚â°-dec-ChorKnd Œ∫1 Œ∫2
... | yes refl = yes $ cong (AllS Œ∫1) $ canAbstract-isProp Œ∫1 ‚àÄŒ∫1 ‚àÄŒ∫2
... | no  ¬¨p   = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) SngS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) UnionS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) AtS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) FunS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L1) (LitLocS L2) with ‚â°-dec-Loc L1 L2
... | yes p = yes $ cong LitLocS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (LitLocS L) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) SngS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) UnionS = no (Œª ())
‚â°-dec-ChorTySymb EmpS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb EmpS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb EmpS AtS = no (Œª ())
‚â°-dec-ChorTySymb EmpS FunS = no (Œª ())
‚â°-dec-ChorTySymb EmpS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb EmpS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb EmpS EmpS = yes refl
‚â°-dec-ChorTySymb EmpS SngS = no (Œª ())
‚â°-dec-ChorTySymb EmpS UnionS = no (Œª ())
‚â°-dec-ChorTySymb SngS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb SngS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb SngS AtS = no (Œª ())
‚â°-dec-ChorTySymb SngS FunS = no (Œª ())
‚â°-dec-ChorTySymb SngS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb SngS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb SngS EmpS = no (Œª ())
‚â°-dec-ChorTySymb SngS SngS = yes refl
‚â°-dec-ChorTySymb SngS UnionS = no (Œª ())
‚â°-dec-ChorTySymb UnionS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb UnionS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb UnionS AtS = no (Œª ())
‚â°-dec-ChorTySymb UnionS FunS = no (Œª ())
‚â°-dec-ChorTySymb UnionS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb UnionS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb UnionS EmpS = no (Œª ())
‚â°-dec-ChorTySymb UnionS SngS = no (Œª ())
‚â°-dec-ChorTySymb UnionS UnionS = yes refl

‚â°-dec-CTy : DecidableEquality CTy
‚â°-dec-CTy = ‚â°-dec-Ty C‚ÖÄ‚Çñ ‚â°-dec-ChorTySymb

-- Predicate for whether a type is of the form t‚Çë @ ‚Ñì
isAtTy : CTy ‚Üí CTyp ‚Üí Set
isAtTy ‚Ñì (Œ∫ , t) = Œ£[ t‚Çë ‚àà _ ] (Œ∫ ‚â° * √ó t ‚â° At t‚Çë ‚Ñì)

dec-isAtTy : (‚Ñì : CTy) (t : CTyp) ‚Üí Dec (isAtTy ‚Ñì t)
dec-isAtTy ‚Ñì (LocKnd Œ∫‚Çë , t) = no Œª ()
dec-isAtTy ‚Ñì (Bnd Œ∫‚Çë , t) = no Œª ()
dec-isAtTy ‚Ñì (* , tyVar x) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (EmbLocalTyS s‚Çë) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (LocalS Œ∫‚Çë) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS []) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ [])) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ [])) with ‚â°-dec-CTy ‚Ñì ‚Ñì'
... | yes refl = yes (t‚Çë , refl , refl)
... | no ¬¨p = no Œª{ (_ , refl , refl) ‚Üí ¬¨p refl }
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ tk ‚à∑ ts)) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ (‚Ñì' , suc k) ‚à∑ ts)) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , suc k) ‚à∑ ts)) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr FunS ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (AllS Œ∫ ‚àÄŒ∫) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (LitLocS L) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr EmpS ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr SngS ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr UnionS ts) = no Œª ()
dec-isAtTy ‚Ñì (*‚Çó , t) = no Œª ()
dec-isAtTy ‚Ñì (*‚Çõ , t) = no Œª ()

-- Predicate for whether a type is of the form ‚Ñì.t‚Çë
isLocalTy : CTy ‚Üí CTyp ‚Üí Set
isLocalTy ‚Ñì (Œ∫ , t) = Œ£[ Œ∫‚Çë ‚àà _ ] Œ£[ t‚Çë ‚àà _ ] (Œ∫ ‚â° Bnd Œ∫‚Çë √ó t ‚â° Local Œ∫‚Çë t‚Çë ‚Ñì)

dec-isLocalTy : (‚Ñì : CTy) (t : CTyp) ‚Üí Dec (isLocalTy ‚Ñì t)
dec-isLocalTy ‚Ñì (LocKnd Œ∫‚Çë , t) = no Œª ()
dec-isLocalTy ‚Ñì (* , t) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyVar x) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (EmbLocalTyS s‚Çë) ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr AtS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) []) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ [])) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ []))
  with ‚â°-dec-CTy ‚Ñì ‚Ñì' | ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes refl | yes refl = yes (Œ∫1‚Çë , t‚Çë , refl , refl)
... | yes p    | no  ¬¨q   = no Œª{ (_ , _ , refl , refl) ‚Üí ¬¨q refl }
... | no ¬¨p    | _        = no Œª{ (_ , _ , refl , refl) ‚Üí ¬¨p refl }
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ tk ‚à∑ ts)) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ (‚Ñì' , suc k) ‚à∑ ts)) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , suc k) ‚à∑ ts)) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr FunS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (AllS Œ∫ ‚àÄŒ∫) ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LitLocS L) ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr EmpS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr SngS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr UnionS ts) = no Œª ()
dec-isLocalTy ‚Ñì (*‚Çó , t) = no Œª ()
dec-isLocalTy ‚Ñì (*‚Çõ , t) = no Œª ()

?isLocalTy : CTy ‚Üí CTyp ‚Üí Bool
?isLocalTy ‚Ñì t = dec-isLocalTy ‚Ñì t .does

?isLocalTy‚àòTypFun‚â°true :
  ‚àÄ Œì ‚Ñì Œì‚Çë' t‚Çë ‚Üí
  ?isLocalTy
    (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
    (TypFun Œì ‚Ñì Œì‚Çë' t‚Çë)
    ‚â° true
?isLocalTy‚àòTypFun‚â°true Œì ‚Ñì Œì‚Çë' (Œ∫‚Çë , t‚Çë) with
  dec-isLocalTy (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì) (TypFun Œì ‚Ñì Œì‚Çë' (Œ∫‚Çë , t‚Çë))
... | yes p = refl
... | no ¬¨p = ‚ä•-elim $ ¬¨p
      (Œ∫‚Çë ,
      renTy C‚ÖÄ‚Çñ
        (regainTyVar (replicate (length Œì‚Çë') true ++ map isLocKnd Œì))
        (injTy t‚Çë) ,
      refl ,
      refl)

isLocalTy-ren
  : ‚àÄ ‚Ñì t‚Çë Œæ ‚Üí
    isLocalTy ‚Ñì t‚Çë ‚Üí
    isLocalTy (renTy C‚ÖÄ‚Çñ Œæ ‚Ñì) (renTyp C‚ÖÄ‚Çñ Œæ t‚Çë)
isLocalTy-ren ‚Ñì (.(Bnd Œ∫‚Çë) , .(Local Œ∫‚Çë t‚Çë ‚Ñì)) Œæ (Œ∫‚Çë , t‚Çë , refl , refl) =
  Œ∫‚Çë , renTy C‚ÖÄ‚Çñ Œæ t‚Çë , refl , refl

isLocalTy-ren‚Åª
  : ‚àÄ ‚Ñì t‚Çë Œæ ‚Üí
    Injective _‚â°_ _‚â°_ Œæ ‚Üí
    isLocalTy (renTy C‚ÖÄ‚Çñ Œæ ‚Ñì) (renTyp C‚ÖÄ‚Çñ Œæ t‚Çë) ‚Üí
    isLocalTy ‚Ñì t‚Çë
isLocalTy-ren‚Åª ‚Ñì (.(Bnd Œ∫‚Çë) , tyConstr (LocalS Œ∫‚Çë') ((t‚Çë' , 0) ‚à∑ (‚Ñì' , 0) ‚à∑ [])) Œæ Œæ-inj (Œ∫‚Çë , t‚Çë , refl , q) =
  Œ∫‚Çë , t‚Çë' , refl ,
  cong‚ÇÉ Local
    (LocalS-inj $ tyConstr-inj C‚ÖÄ‚Çñ q .fst)
    refl
    (renTy-inj C‚ÖÄ‚Çñ Œæ-inj $
       fst $ tyCons-inj C‚ÖÄ‚Çñ $ snd $ snd $ tyCons-inj C‚ÖÄ‚Çñ $ snd $ tyConstr-inj C‚ÖÄ‚Çñ q)

?isLocalTy-ren-‚â°
  : ‚àÄ ‚Ñì t‚Çë Œæ ‚Üí
    Injective _‚â°_ _‚â°_ Œæ ‚Üí
    ?isLocalTy ‚Ñì t‚Çë ‚â° ?isLocalTy (renTy C‚ÖÄ‚Çñ Œæ ‚Ñì) (renTyp C‚ÖÄ‚Çñ Œæ t‚Çë)
?isLocalTy-ren-‚â° ‚Ñì t‚Çë Œæ Œæ-inj
  with dec-isLocalTy ‚Ñì t‚Çë | dec-isLocalTy (renTy C‚ÖÄ‚Çñ Œæ ‚Ñì) (renTyp C‚ÖÄ‚Çñ Œæ t‚Çë)
... | yes p | yes q = refl
... | yes p | no ¬¨q = ‚ä•-elim $ ¬¨q $ isLocalTy-ren ‚Ñì t‚Çë Œæ p
... | no ¬¨p | yes q = ‚ä•-elim $ ¬¨p $ isLocalTy-ren‚Åª ‚Ñì t‚Çë Œæ Œæ-inj q
... | no ¬¨p | no ¬¨q = refl

{-
Context projection

Projects a choreographic context to a local context at ‚Ñì
by keeping all types of the form ‚Ñì.t‚Çë

proj ‚Ñì [] = []
proj ‚Ñì (‚Ñì.t‚Çë ‚à∑ Œî) = t‚Çë ‚à∑ proj ‚Ñì Œî
proj ‚Ñì (t ‚à∑ Œî) = proj ‚Ñì Œî
-}
projCtx : List Bool ‚Üí CTy ‚Üí ChorCtx ‚Üí Ctx‚Çë
projCtx Œì ‚Ñì [] = []
projCtx Œì ‚Ñì (t ‚à∑ Œî) with dec-isLocalTy ‚Ñì t
... | yes (Œ∫‚Çë , t‚Çë , _ , _) = (Œ∫‚Çë , projTy Œì t‚Çë) ‚à∑ projCtx Œì ‚Ñì Œî
... | no ¬¨p = projCtx Œì ‚Ñì Œî

{-
Projecting preserves context well-formedness

Œì ‚ä¢ Œî
--------
Œì‚à£ ‚ä¢‚Çë Œî‚à£‚Ñì
-}
‚ä¢projCtx : ‚àÄ{Œì Œî} ‚Üí
           (‚Ñì : CTy) ‚Üí
           Œì c‚ä¢ctx Œî ‚Üí
           projKndCtx Œì e‚ä¢ctx projCtx (map isLocKnd Œì) ‚Ñì Œî
‚ä¢projCtx {Œî = []} ‚Ñì tt = tt
‚ä¢projCtx {Œî = t ‚à∑ Œî} ‚Ñì (‚ä¢t , ‚ä¢Œî) with dec-isLocalTy ‚Ñì t
... | yes (Œ∫‚Çë , t‚Çë , refl , refl) =
  (‚ä¢projTy $ ‚ä¢Local‚Åª ‚ä¢t .fst) , ‚ä¢projCtx ‚Ñì ‚ä¢Œî
... | no ¬¨p = ‚ä¢projCtx ‚Ñì ‚ä¢Œî

-- Projecting distributes over concatenation
projCtx-++ : (Œì : List Bool) (‚Ñì : CTy) (Œî1 Œî2 : ChorCtx) ‚Üí
             projCtx Œì ‚Ñì (Œî1 ++ Œî2) ‚â°
             projCtx Œì ‚Ñì Œî1 ++ projCtx Œì ‚Ñì Œî2
projCtx-++ Œì ‚Ñì [] Œî2 = refl
projCtx-++ Œì ‚Ñì (t ‚à∑ Œî1) Œî2 with dec-isLocalTy ‚Ñì t
... | yes (Œ∫‚Çë , t‚Çë , refl , refl) =
  cong ((Œ∫‚Çë , projTy Œì t‚Çë) ‚à∑_) $
  projCtx-++ Œì ‚Ñì Œî1 Œî2
... | no ¬¨p = projCtx-++ Œì ‚Ñì Œî1 Œî2

{-
projCtx ‚àò ‚ü®Œæ‚ü© ‚âó ‚ü®proj Œæ‚ü© ‚àò projCtx

Renaming and then projecting a context is
identical to projecting and then renaming the
context on the projected renaming.
-}
proj‚àòren‚âóprojRen‚àòprojCtx
  : ‚àÄ{Œì1 Œì2 Œæ Œî} ‚Üí
    Injective _‚â°_ _‚â°_ Œæ ‚Üí
    TYREN C‚ÖÄ‚Çñ Œæ Œì1 Œì2 ‚Üí
    Œì1 c‚ä¢ctx Œî ‚Üí
    (‚Ñì : CTy) ‚Üí
    projCtx (map isLocKnd Œì2) (renTy C‚ÖÄ‚Çñ Œæ ‚Ñì) (renCtx C‚ÖÄ‚Çñ Œæ Œî) ‚â°
    renCtx ‚ÖÄ‚Çë‚Çñ (projTyRen Œì1 Œì2 Œæ) (projCtx (map isLocKnd Œì1) ‚Ñì Œî)
proj‚àòren‚âóprojRen‚àòprojCtx {Œî = []} Œæ-inj ‚ä¢Œæ tt ‚Ñì = refl
proj‚àòren‚âóprojRen‚àòprojCtx {Œì1} {Œì2} {Œæ} {Œî = t ‚à∑ Œî} Œæ-inj ‚ä¢Œæ (‚ä¢t , ‚ä¢Œî) ‚Ñì
  with dec-isLocalTy ‚Ñì t | dec-isLocalTy (renTy C‚ÖÄ‚Çñ Œæ ‚Ñì) (renTyp C‚ÖÄ‚Çñ Œæ t)
... | yes (Œ∫‚Çë , t‚Çë , refl , refl) | yes (.Œ∫‚Çë , .(renTy C‚ÖÄ‚Çñ (Keep* Œæ 0) t‚Çë) , refl , refl) =
  cong‚ÇÇ (Œª x y ‚Üí (Œ∫‚Çë , x) ‚à∑ y)
    (proj‚àòren‚âóprojRen‚àòprojTy ‚ä¢Œæ (‚ä¢Local‚Åª ‚ä¢t .fst))
    (proj‚àòren‚âóprojRen‚àòprojCtx Œæ-inj ‚ä¢Œæ ‚ä¢Œî ‚Ñì)
... | yes (Œ∫‚Çë , t‚Çë , refl , refl) | no ¬¨q =
  ‚ä•-elim $ ¬¨q (Œ∫‚Çë , renTy C‚ÖÄ‚Çñ Œæ t‚Çë , refl , refl)
proj‚àòren‚âóprojRen‚àòprojCtx {Œì1} {Œì2} {Œæ} {(.(Bnd Œ∫‚Çë) , tyConstr (LocalS Œ∫‚Çë') ((t‚Çë' , 0) ‚à∑ (‚Ñì' , 0) ‚à∑ [])) ‚à∑ Œî}
  Œæ-inj ‚ä¢Œæ (‚ä¢t , ‚ä¢Œî) ‚Ñì | no ¬¨p | yes (Œ∫‚Çë , t‚Çë , refl , r) =
   ‚ä•-elim $ ¬¨p (Œ∫‚Çë , t‚Çë' , refl ,
   cong‚ÇÇ (Œª x y ‚Üí tyConstr (LocalS x)
        ((t‚Çë' , 0) ‚à∑ (y , 0) ‚à∑ []))
        (LocalS-inj $ tyConstr-inj C‚ÖÄ‚Çñ r .fst)
        (renTy-inj C‚ÖÄ‚Çñ Œæ-inj $ fst $ tyCons-inj C‚ÖÄ‚Çñ $ snd $ snd $ tyCons-inj C‚ÖÄ‚Çñ (tyConstr-inj C‚ÖÄ‚Çñ r .snd)))
... | no ¬¨p | no ¬¨q = proj‚àòren‚âóprojRen‚àòprojCtx Œæ-inj ‚ä¢Œæ ‚ä¢Œî ‚Ñì

-- A local type is local
Local-isLocalTy : (Œ∫‚Çë : Knd‚Çë) (‚Ñì : CTy) (t‚Çë : CTy) ‚Üí isLocalTy ‚Ñì (Bnd Œ∫‚Çë , Local Œ∫‚Çë t‚Çë ‚Ñì)
Local-isLocalTy Œ∫‚Çë ‚Ñì t‚Çë = Œ∫‚Çë , t‚Çë , refl , refl

Local-?isLocalTy : (Œ∫‚Çë : Knd‚Çë) (‚Ñì : CTy) (t‚Çë : CTy) ‚Üí ?isLocalTy ‚Ñì (Bnd Œ∫‚Çë , Local Œ∫‚Çë t‚Çë ‚Ñì) ‚â° true
Local-?isLocalTy Œ∫‚Çë ‚Ñì t‚Çë = dec-true (dec-isLocalTy ‚Ñì (Bnd Œ∫‚Çë , Local Œ∫‚Çë t‚Çë ‚Ñì)) (Local-isLocalTy Œ∫‚Çë ‚Ñì t‚Çë)

LocalTyp : (Œæ : Ren) (‚Ñì : CTy) (t‚Çë : Typ‚Çë) ‚Üí CTyp
LocalTyp Œæ ‚Ñì (Œ∫‚Çë , t‚Çë) = Bnd Œ∫‚Çë , Local Œ∫‚Çë (renTy C‚ÖÄ‚Çñ Œæ (injTy t‚Çë)) ‚Ñì

-- An injected type is local
LocalTyp-isLocalTy : (Œæ : Ren) (‚Ñì : CTy) (t‚Çë : Typ‚Çë) ‚Üí isLocalTy ‚Ñì (LocalTyp Œæ ‚Ñì t‚Çë)
LocalTyp-isLocalTy Œæ ‚Ñì (Œ∫‚Çë , t‚Çë) = Œ∫‚Çë , renTy C‚ÖÄ‚Çñ Œæ (injTy t‚Çë) , refl , refl

LocalTyp-?isLocalTy : (Œæ : Ren) (‚Ñì : CTy) (t‚Çë : Typ‚Çë) ‚Üí ?isLocalTy ‚Ñì (LocalTyp Œæ ‚Ñì t‚Çë) ‚â° true
LocalTyp-?isLocalTy Œæ ‚Ñì t‚Çë =
  dec-true (dec-isLocalTy ‚Ñì (LocalTyp Œæ ‚Ñì t‚Çë)) (LocalTyp-isLocalTy Œæ ‚Ñì t‚Çë)

{-
Context injection

Injects a local context to a choreographic context by converting
every local type t‚Çë to the type ‚Ñì.t‚Çë

inj Œæ ‚Ñì [] = []
inj Œæ ‚Ñì (t‚Çë ‚à∑ Œî‚Çë) = ‚Ñì.‚ü®Œæ‚ü©t‚Çë ‚à∑ inj Œî‚Çë
-}
injCtx : Ren ‚Üí CTy ‚Üí Ctx‚Çë ‚Üí ChorCtx
injCtx Œæ ‚Ñì Œî‚Çë = map (LocalTyp Œæ ‚Ñì) Œî‚Çë

{-
Injecting preserves context well-formedness

Œì‚Çë ‚ä¢‚Çë Œî‚Çë
Œæ : inj Œì‚Çë ‚áí Œì
Œì ‚ä¢ ‚Ñì : *‚Çó
-------------
Œì ‚ä¢ ‚Ñì.‚ü®Œæ‚ü©Œî‚Çë
-}
‚ä¢injCtx : ‚àÄ{Œæ Œì‚Çë Œì Œî‚Çë ‚Ñì} ‚Üí
          TYREN C‚ÖÄ‚Çñ Œæ (injKndCtx Œì‚Çë) Œì ‚Üí
          Œì c‚ä¢‚Çú ‚Ñì ‚à∂ *‚Çó ‚Üí
          Œì‚Çë e‚ä¢ctx Œî‚Çë ‚Üí
          Œì c‚ä¢ctx injCtx Œæ ‚Ñì Œî‚Çë
‚ä¢injCtx {Œî‚Çë = []} ‚ä¢Œæ ‚ä¢‚Ñì tt = tt 
‚ä¢injCtx {Œî‚Çë = (Œ∫‚Çë , t‚Çë) ‚à∑ Œî‚Çë} ‚ä¢Œæ ‚ä¢‚Ñì (‚ä¢t‚Çë , ‚ä¢Œî‚Çë) =
  ‚ä¢Local (‚ä¢renTy C‚ÖÄ‚Çñ ‚ä¢Œæ (‚ä¢injTy ‚ä¢t‚Çë)) ‚ä¢‚Ñì , ‚ä¢injCtx ‚ä¢Œæ ‚ä¢‚Ñì ‚ä¢Œî‚Çë

-- Injecting contexts distributes over concatenation
injCtx-++ : (Œæ : Ren) (‚Ñì : CTy) (Œî1‚Çë Œî2‚Çë : Ctx‚Çë) ‚Üí
             injCtx Œæ ‚Ñì (Œî1‚Çë ++ Œî2‚Çë) ‚â° injCtx  Œæ ‚Ñì Œî1‚Çë ++ injCtx Œæ ‚Ñì Œî2‚Çë
injCtx-++ Œæ ‚Ñì Œî1 Œî2 = map-++-commute (LocalTyp Œæ ‚Ñì) Œî1 Œî2

regainTyVarId : ‚àÄ{Œì‚Çë x Œ∫‚Çë} ‚Üí
                injKndCtx Œì‚Çë c‚ä¢‚Çúvar x ‚à∂ LocKnd Œ∫‚Çë ‚Üí
                regainTyVar (map isLocKnd (injKndCtx Œì‚Çë)) x ‚â° x
regainTyVarId {Œ∫‚Çë ‚à∑ Œì‚Çë} ‚ä¢‚Çú0 = refl
regainTyVarId {Œ∫‚Çë ‚à∑ Œì‚Çë} (‚ä¢‚ÇúS ‚ä¢x) = cong suc $ regainTyVarId ‚ä¢x

regainTyId : ‚àÄ{Œì‚Çë t Œ∫‚Çë} ‚Üí
              injKndCtx Œì‚Çë c‚ä¢‚Çú t ‚à∂ LocKnd Œ∫‚Çë ‚Üí
              regainTy (map isLocKnd (injKndCtx Œì‚Çë)) t ‚â° t
regainTyVecId : ‚àÄ{Œì‚Çë ts Œ£‚Çë} ‚Üí
                injKndCtx Œì‚Çë c‚ä¢‚Çúvec ts ‚à∂ map LocKndŒ£ Œ£‚Çë ‚Üí
                regainTyVec (map isLocKnd (injKndCtx Œì‚Çë)) ts ‚â° ts

regainTyId {t = tyVar x} (‚ä¢‚Çúvar ‚ä¢x) =
  cong tyVar $ regainTyVarId ‚ä¢x
regainTyId {t = tyConstr (EmbLocalTyS s‚Çë) ts}
  (‚ä¢‚ÇútyConstr .(EmbLocalTyS s‚Çë) ‚ä¢ts) =
    cong (tyConstr (EmbLocalTyS s‚Çë)) $ regainTyVecId ‚ä¢ts

regainTyVecId {ts = []} {[]} ‚ä¢‚Çú[] = refl
regainTyVecId {Œì‚Çë} {(t , .(length (injKndCtx Œì‚Çë'))) ‚à∑ ts}
  {(Œì‚Çë' , Œ∫‚Çë) ‚à∑ Œ£‚Çë} (‚ä¢t ‚ä¢‚Çú‚à∑ ‚ä¢ts) =
    cong‚ÇÇ (Œª x y ‚Üí (x , length (injKndCtx Œì‚Çë')) ‚à∑ y)
      (renTy C‚ÖÄ‚Çñ
          (Keep* (regainTyVar (map isLocKnd (injKndCtx Œì‚Çë)))
            (length (injKndCtx Œì‚Çë')))
        t
        ‚â°‚ü® renTy-ext C‚ÖÄ‚Çñ
              (Keep*-regainTyVar (map isLocKnd (injKndCtx Œì‚Çë))
                (length (injKndCtx Œì‚Çë')))
              t ‚ü©
      renTy C‚ÖÄ‚Çñ
        (regainTyVar
          (replicate (length (injKndCtx Œì‚Çë')) true ++
            map isLocKnd (injKndCtx Œì‚Çë)))
        t
        ‚â°‚ü® (cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ
                (regainTyVar
                  (replicate x true ++ map isLocKnd (injKndCtx Œì‚Çë)))
                  t) $
              length-map LocKnd Œì‚Çë') ‚ü©
      renTy C‚ÖÄ‚Çñ
        (regainTyVar
          (replicate (length Œì‚Çë') true ++
            map isLocKnd (injKndCtx Œì‚Çë)))
        t
        ‚â°‚ü® (cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ
                (regainTyVar (x ++ map isLocKnd (injKndCtx Œì‚Çë))) t) $
              sym $ isLocKnd‚àòinjKndCtx‚â°true Œì‚Çë') ‚ü©
      renTy C‚ÖÄ‚Çñ
        (regainTyVar
          (map isLocKnd (injKndCtx Œì‚Çë') ++
            map isLocKnd (injKndCtx Œì‚Çë)))
        t
        ‚â°‚ü® (cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ (regainTyVar x) t) $
            sym $ map-++-commute isLocKnd (injKndCtx Œì‚Çë') (injKndCtx Œì‚Çë)) ‚ü©
      renTy C‚ÖÄ‚Çñ (regainTyVar (map isLocKnd (injKndCtx Œì‚Çë' ++ injKndCtx Œì‚Çë))) t
        ‚â°‚ü® (cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ (regainTyVar (map isLocKnd x)) t) $
            sym $ injKndCtx-++ Œì‚Çë' Œì‚Çë) ‚ü©
      renTy C‚ÖÄ‚Çñ (regainTyVar (map isLocKnd (injKndCtx (Œì‚Çë' ++ Œì‚Çë)))) t
        ‚â°‚ü® (regainTyId $
            subst (_c‚ä¢‚Çú t ‚à∂ LocKnd Œ∫‚Çë)
              (sym $ injKndCtx-++ Œì‚Çë' Œì‚Çë)
              ‚ä¢t) ‚ü©
      t ‚àé)
      (regainTyVecId ‚ä¢ts)

projTyRen-regain‚âóid : ‚àÄ{Œì x Œ∫‚Çë} ‚Üí
                      projKndCtx Œì e‚ä¢‚Çúvar x ‚à∂ Œ∫‚Çë ‚Üí
                      projTyRen (injKndCtx (projKndCtx Œì)) Œì (regainTyVar (map isLocKnd Œì)) x ‚â° x
projTyRen-regain‚âóid {Œì} {x} {Œ∫‚Çë} ‚ä¢x =
  projTyVar (map isLocKnd Œì)
    (regainTyVar (map isLocKnd Œì)
     (regainTyVar (map isLocKnd (injKndCtx (projKndCtx Œì))) x))
    ‚â°‚ü® (cong (Œª y ‚Üí projTyVar (map isLocKnd Œì) (regainTyVar (map isLocKnd Œì) y)) $
        regainTyVarId (‚ä¢injTyVar ‚ä¢x)) ‚ü©
  projTyVar (map isLocKnd Œì) (regainTyVar (map isLocKnd Œì) x)
    ‚â°‚ü® proj‚àòregain‚àòinjTyVar‚âóid (map isLocKnd Œì) x ‚ü©
  x ‚àé

-- Projecting after injecting a context has no effect
proj‚àòregain‚àòinjCtx‚âóid
  : ‚àÄ{Œì Œî‚Çë} ‚Üí
    (‚Ñì : CTy) ‚Üí
    projKndCtx Œì e‚ä¢ctx Œî‚Çë ‚Üí
    projCtx (map isLocKnd Œì) ‚Ñì (injCtx (regainTyVar (map isLocKnd Œì)) ‚Ñì Œî‚Çë) ‚â° Œî‚Çë
proj‚àòregain‚àòinjCtx‚âóid {Œî‚Çë = []} ‚Ñì tt = refl
proj‚àòregain‚àòinjCtx‚âóid {Œì} {(Œ∫‚Çë , t‚Çë) ‚à∑ Œî‚Çë} ‚Ñì (‚ä¢t‚Çë , ‚ä¢Œî‚Çë) with dec-isLocalTy ‚Ñì (LocalTyp (regainTyVar (map isLocKnd Œì)) ‚Ñì (Œ∫‚Çë , t‚Çë))
... | yes (.Œ∫‚Çë , .(renTy C‚ÖÄ‚Çñ (regainTyVar (map isLocKnd Œì)) (injTy t‚Çë)) , refl , refl) =
  cong‚ÇÇ (Œª x y ‚Üí (Œ∫‚Çë , x) ‚à∑ y)
    (proj‚àòregain‚àòinjTy‚âóid ‚ä¢t‚Çë)
    (proj‚àòregain‚àòinjCtx‚âóid ‚Ñì ‚ä¢Œî‚Çë)
... | no ¬¨p = ‚ä•-elim $ ¬¨p $ LocalTyp-isLocalTy (regainTyVar (map isLocKnd Œì)) ‚Ñì (Œ∫‚Çë , t‚Çë)

-- An injected context only contains local types
isLocalTy‚àòinjCtx‚â°true : (Œæ : Ren) (‚Ñì : CTy) (Œî‚Çë : Ctx‚Çë) ‚Üí
                        map (?isLocalTy ‚Ñì) (injCtx Œæ ‚Ñì Œî‚Çë) ‚â°
                        replicate (length Œî‚Çë) true
isLocalTy‚àòinjCtx‚â°true Œæ ‚Ñì Œî‚Çë =
  map (?isLocalTy ‚Ñì) (map (LocalTyp Œæ ‚Ñì) Œî‚Çë)
    ‚â°‚ü® (sym $ map-compose {g = ?isLocalTy ‚Ñì} {LocalTyp Œæ ‚Ñì} Œî‚Çë) ‚ü©
  map (?isLocalTy ‚Ñì ‚àò LocalTyp Œæ ‚Ñì) Œî‚Çë
    ‚â°‚ü® map-cong (LocalTyp-?isLocalTy Œæ ‚Ñì) Œî‚Çë ‚ü©
  map (Œª _ ‚Üí true) Œî‚Çë
    ‚â°‚ü® map-const true Œî‚Çë ‚ü©
  replicate (length Œî‚Çë) true ‚àé

---------------------
-- TERM PROJECTION --
---------------------

{-
If a choreographic term C has type ‚Ñì.t‚Çë
Œì ‚®æ Œî ‚ä¢ C : ‚Ñì.t‚Çë
then there is a corresponding local term
Œì‚à£ ‚®æ Œî‚à£‚Ñì ‚ä¢ proj ‚Ñì C : t‚Çë
in the projected context
-}
projVar : (Œî : List Bool) ‚Üí Ren
projVar [] = id
projVar (true ‚à∑ Œî) = Keep (projVar Œî)
projVar (false ‚à∑ Œî) zero = zero
projVar (false ‚à∑ Œî) (suc x) = projVar Œî x

‚ä¢projVar : ‚àÄ{Œì Œî x Œ∫‚Çë t‚Çë} ‚Üí
            (‚Ñì : CTy) ‚Üí
            Œì ‚®æ Œî c‚ä¢var x ‚à∂ (Bnd Œ∫‚Çë , Local Œ∫‚Çë t‚Çë ‚Ñì) ‚Üí
            projKndCtx Œì ‚®æ projCtx (map isLocKnd Œì) ‚Ñì Œî
            e‚ä¢var projVar (map (?isLocalTy ‚Ñì) Œî) x
            ‚à∂ (Œ∫‚Çë , projTy (map isLocKnd Œì) t‚Çë)
‚ä¢projVar {Œì} {.(Bnd Œ∫‚Çë , Local Œ∫‚Çë t‚Çë ‚Ñì) ‚à∑ Œî} {zero} {Œ∫‚Çë} {t‚Çë} ‚Ñì (‚ä¢0 ‚ä¢Œî ‚ä¢t)
  with dec-isLocalTy ‚Ñì (Bnd Œ∫‚Çë , Local Œ∫‚Çë t‚Çë ‚Ñì)
... | yes (_ , _ , refl , refl) = ‚ä¢0 (‚ä¢projCtx ‚Ñì ‚ä¢Œî) (‚ä¢projTy (fst $ ‚ä¢Local‚Åª ‚ä¢t))
... | no ¬¨p = ‚ä•-elim $ ¬¨p $ Local-isLocalTy Œ∫‚Çë ‚Ñì t‚Çë
‚ä¢projVar {Œì} {Œî = t ‚à∑ Œî} {suc x} ‚Ñì (‚ä¢S ‚ä¢x ‚ä¢t) with dec-isLocalTy ‚Ñì t
... | yes (Œ∫‚Çë , t‚Çë , refl , refl) = ‚ä¢S (‚ä¢projVar ‚Ñì ‚ä¢x) (‚ä¢projTy (fst $ ‚ä¢Local‚Åª ‚ä¢t))
... | no _ = ‚ä¢projVar ‚Ñì ‚ä¢x

proj : (Œì Œî : List Bool) ‚Üí CTm ‚Üí Tm‚Çë
projVec : (Œì Œî : List Bool) ‚Üí CTmVec ‚Üí TmVec‚Çë

proj Œì Œî (var x) = var (projVar Œî x)
proj Œì Œî (constr (LocalTmS s‚Çë) ((‚Ñì , 0) ‚à∑ ts) es) =
  constr s‚Çë (projTyVec Œì ts) (projVec Œì Œî es)
proj Œì Œî _ = var zero

projVec Œì Œî [] = []
projVec Œì Œî ((e , m , n) ‚à∑ es) =
  (proj (replicate m true ++ Œì) (replicate n true ++ Œî) e , m , n)
  ‚à∑ projVec Œì Œî es

projCtx‚àòTypFun‚âóid
  : ‚àÄ{Œì ‚Ñì} (Œî‚Çë : Ctx ‚ÖÄ‚Çë‚Çñ) (Œì‚Çë' : KndCtx‚Çë) ‚Üí
    projKndCtx (map LocKnd Œì‚Çë' ++ Œì) e‚ä¢ctx Œî‚Çë ‚Üí
    projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
      (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
      (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë)
    ‚â° Œî‚Çë
projCtx‚àòTypFun‚âóid [] Œì‚Çë' tt = refl
projCtx‚àòTypFun‚âóid {Œì} {‚Ñì} ((Œ∫‚Çë , t‚Çë) ‚à∑ Œî‚Çë) Œì‚Çë' (‚ä¢t‚Çë , ‚ä¢Œî‚Çë)
  with dec-isLocalTy (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì) (TypFun Œì ‚Ñì Œì‚Çë' (Œ∫‚Çë , t‚Çë))
... | yes (_ , _ , refl , refl) =
  let eq : replicate (length Œì‚Çë') true ++ map isLocKnd Œì
           ‚â° map isLocKnd (map LocKnd Œì‚Çë' ++ Œì)
      eq =
        replicate (length Œì‚Çë') true ++ map isLocKnd Œì
          ‚â°‚ü® (cong (_++ map isLocKnd Œì) $ sym $ isLocKnd‚àòinjKndCtx‚â°true Œì‚Çë') ‚ü©
        map isLocKnd (map LocKnd Œì‚Çë') ++ map isLocKnd Œì
          ‚â°‚ü® (sym $ map-++-commute isLocKnd (map LocKnd Œì‚Çë') Œì) ‚ü©
        map isLocKnd (map LocKnd Œì‚Çë' ++ Œì) ‚àé
  in cong‚ÇÇ (Œª x y ‚Üí (Œ∫‚Çë , x) ‚à∑ y)
    (projTy (map isLocKnd (map LocKnd Œì‚Çë' ++ Œì))
      (regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
        (injTy t‚Çë))
      ‚â°‚ü® cong (Œª x ‚Üí projTy (map isLocKnd (map LocKnd Œì‚Çë' ++ Œì))
            (regainTy x (injTy t‚Çë)))
          eq ‚ü©
    projTy (map isLocKnd (map LocKnd Œì‚Çë' ++ Œì))
      (regainTy (map isLocKnd (map LocKnd Œì‚Çë' ++ Œì))
        (injTy t‚Çë))
      ‚â°‚ü® proj‚àòregain‚àòinjTy‚âóid ‚ä¢t‚Çë ‚ü©
    t‚Çë ‚àé)
    (projCtx‚àòTypFun‚âóid Œî‚Çë Œì‚Çë' ‚ä¢Œî‚Çë)
... | no ¬¨p = ‚ä•-elim $ ¬¨p (Œ∫‚Çë , _ , refl , refl)

‚ä¢proj : ‚àÄ{Œì Œî e Œ∫‚Çë t‚Çë} ‚Üí
          (‚Ñì : CTy) ‚Üí
          Œì ‚®æ Œî c‚ä¢ e ‚à∂ (Bnd Œ∫‚Çë , Local Œ∫‚Çë t‚Çë ‚Ñì) ‚Üí
          projKndCtx Œì ‚®æ projCtx (map isLocKnd Œì) ‚Ñì Œî
          e‚ä¢ proj (map isLocKnd Œì) (map (?isLocalTy ‚Ñì) Œî) e
          ‚à∂ (Œ∫‚Çë , projTy (map isLocKnd Œì) t‚Çë)
‚ä¢projVec : ‚àÄ{Œì Œî es Œ£‚Çë} ‚Üí
            (‚Ñì : CTy) ‚Üí
            Œì ‚®æ Œî c‚ä¢vec es ‚à∂ map (BinderFun Œì ‚Ñì) Œ£‚Çë ‚Üí
            projKndCtx Œì ‚®æ projCtx (map isLocKnd Œì) ‚Ñì Œî
            e‚ä¢vec projVec (map isLocKnd Œì) (map (?isLocalTy ‚Ñì) Œî) es
            ‚à∂ Œ£‚Çë

‚ä¢proj {e = var x} ‚Ñì (‚ä¢var ‚ä¢x) = ‚ä¢var $ ‚ä¢projVar ‚Ñì ‚ä¢x
‚ä¢proj {Œì} {Œî} {e = constr (LocalTmS s‚Çë) ((‚Ñì , 0) ‚à∑ ts) es}
  {.(TmSig‚Çë s‚Çë (projKndCtx Œì) (projTyVec (map isLocKnd Œì) ts) .snd .fst)}
  {.(regainTy (map isLocKnd Œì) (injTy (TmSig‚Çë s‚Çë (projKndCtx Œì) (projTyVec (map isLocKnd Œì) ts) .snd .snd)))}
  .‚Ñì (‚ä¢constr .(LocalTmS s‚Çë) (‚ä¢‚Ñì ‚ä¢‚Çú‚à∑ ‚ä¢ts) ‚ä¢es) =
    let eq : projTy (map isLocKnd Œì) (regainTy (map isLocKnd Œì)
              (injTy (TmSig‚Çë s‚Çë (projKndCtx Œì) (projTyVec (map isLocKnd Œì) ts) .snd .snd)))
             ‚â° TmSig‚Çë s‚Çë (projKndCtx Œì) (projTyVec (map isLocKnd Œì) ts) .snd .snd
        eq = proj‚àòregain‚àòinjTy‚âóid $ ùïÉ .‚ÖÄ‚Çë .‚ä¢TmSig-snd s‚Çë $ ‚ä¢projTyVec ‚ä¢ts
    in subst (Œª x ‚Üí
          projKndCtx Œì ‚®æ projCtx (map isLocKnd Œì) ‚Ñì Œî
          e‚ä¢ constr s‚Çë
            (projTyVec (map isLocKnd Œì) ts)
            (projVec (map isLocKnd Œì) (map (Œª t ‚Üí dec-isLocalTy ‚Ñì t .does) Œî) es)
          ‚à∂ (TmSig‚Çë s‚Çë (projKndCtx Œì) (projTyVec (map isLocKnd Œì) ts) .snd .fst , x))
        (sym eq)
        (‚ä¢constr s‚Çë (‚ä¢projTyVec ‚ä¢ts) (‚ä¢projVec ‚Ñì ‚ä¢es))
‚ä¢proj {e = constr DoneS ((t‚Çë , 0) ‚à∑ (‚Ñì' , 0) ‚à∑ []) ((e , 0 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr LamS ((œÑ1 , 0) ‚à∑ (œÑ2 , 0) ‚à∑ []) ((C , 0 , 1) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr FixS ((œÑ , 0) ‚à∑ []) ((C , 0 , 1) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr AppS ((œÑ1 , 0) ‚à∑ (œÑ2 , 0) ‚à∑ []) ((C1 , 0 , 0) ‚à∑ (C2 , 0 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr (AbsS Œ∫ ‚àÄŒ∫) ((œÑ , 1) ‚à∑ []) ((C , 1 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr (AppTyS Œ∫ ‚àÄŒ∫) ((œÑ , 1) ‚à∑ (T , 0) ‚à∑ []) ((C , 0 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr SendS ((‚Ñì1 , 0) ‚à∑ (‚Ñì2 , 0) ‚à∑ (t‚Çë , 0) ‚à∑ []) ((C , 0 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr (SyncS d) ((‚Ñì1 , 0) ‚à∑ (‚Ñì2 , 0) ‚à∑ (œÑ , 0) ‚à∑ []) ((C , 0 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr ITES ((‚Ñì' , 0) ‚à∑ (œÑ1 , 0) ‚à∑ []) ((C1 , 0 , 0) ‚à∑ (C2 , 0 , 0) ‚à∑ (C3 , 0 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr LocalLetS ((‚Ñì' , 0) ‚à∑ (t‚Çë , 0) ‚à∑ (œÑ , 0) ‚à∑ []) ((C1 , 0 , 0) ‚à∑ (C2 , 0 , 1) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr TellTyS ((‚Ñì' , 0) ‚à∑ (œÅ , 0) ‚à∑ (œÑ , 0) ‚à∑ []) ((C1 , 0 , 0) ‚à∑ (C2 , 1 , 0) ‚à∑ [])} ‚Ñì ()
‚ä¢proj {e = constr TellLocS ((‚Ñì' , 0) ‚à∑ (œÅ , 0) ‚à∑ (œÑ , 0) ‚à∑ []) ((C1 , 0 , 0) ‚à∑ (C2 , 1 , 0) ‚à∑ [])} ‚Ñì ()

‚ä¢projVec {es = []} {[]} ‚Ñì (‚ä¢[] ‚ä¢Œî) = ‚ä¢[] (‚ä¢projCtx ‚Ñì ‚ä¢Œî)
‚ä¢projVec {Œì} {Œî} {es = (e , .(length (injKndCtx Œì‚Çë')) , .(length (map (TypFun _ ‚Ñì Œì‚Çë') Œî‚Çë'))) ‚à∑ es}
  {(Œì‚Çë' , Œî‚Çë' , Œ∫‚Çë , t‚Çë) ‚à∑ Œ£‚Çë} ‚Ñì (‚ä¢e ‚ä¢‚à∑ ‚ä¢es) =
    let ‚ä¢Œî : Œì c‚ä¢ctx Œî
        ‚ä¢Œî = ‚ä¢renCtx‚Åª C‚ÖÄ‚Çñ (‚ä¢TyDrop‚Åª* C‚ÖÄ‚Çñ (‚ä¢TyIdRen‚Åª C‚ÖÄ‚Çñ) (injKndCtx Œì‚Çë')) $
                ‚ä¢ctx-++‚Åª C‚ÖÄ‚Çñ (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
                (renCtx (C‚ÖÄ .‚ÖÄ‚Çñ) (Drop* id (length (injKndCtx Œì‚Çë'))) Œî)
                (‚ä¢‚áí‚ä¢ctx C‚ÖÄ ‚ä¢e) .snd
        ‚ä¢TypFun-Œî‚Çë' : (injKndCtx Œì‚Çë' ++ Œì) c‚ä¢ctx map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë'
        ‚ä¢TypFun-Œî‚Çë' = ‚ä¢ctx-++‚Åª C‚ÖÄ‚Çñ (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
                        (renCtx (C‚ÖÄ .‚ÖÄ‚Çñ) (Drop* id (length (injKndCtx Œì‚Çë'))) Œî)
                        (‚ä¢‚áí‚ä¢ctx C‚ÖÄ ‚ä¢e) .fst
        eq : Œì‚Çë' ++ projKndCtx Œì ‚â° projKndCtx (injKndCtx Œì‚Çë' ++ Œì)
        eq =
          Œì‚Çë' ++ projKndCtx Œì
            ‚â°‚ü® (cong (_++ projKndCtx Œì) $ sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë') ‚ü©
          projKndCtx (injKndCtx Œì‚Çë') ++ projKndCtx Œì
            ‚â°‚ü® (sym $ projKndCtx-++ (injKndCtx Œì‚Çë')  Œì) ‚ü©
          projKndCtx (injKndCtx Œì‚Çë' ++ Œì) ‚àé
        ‚ä¢Œî‚Çë' : projKndCtx (injKndCtx Œì‚Çë' ++ Œì) e‚ä¢ctx Œî‚Çë'
        ‚ä¢Œî‚Çë' = map-AllElems‚Åª
                  (wfTyp ‚ÖÄ‚Çë‚Çñ (projKndCtx (injKndCtx Œì‚Çë' ++ Œì)))
                  (wfTyp C‚ÖÄ‚Çñ (injKndCtx Œì‚Çë' ++ Œì))
                  (TypFun Œì ‚Ñì Œì‚Çë')
                  (Œª t‚Çë ‚ä¢Local-t‚Çë ‚Üí
                    subst (Œª x ‚Üí wfTyp ‚ÖÄ‚Çë‚Çñ x t‚Çë) eq $
                    ‚ä¢TypFun‚Åª {Œì} {‚Ñì} {Œì‚Çë'} {t‚Çë} ‚ä¢Local-t‚Çë .snd)
                  ‚ä¢TypFun-Œî‚Çë'
        eq2 : replicate (length Œì‚Çë') true ++ map isLocKnd Œì
              ‚â° map isLocKnd (injKndCtx Œì‚Çë' ++ Œì)
        eq2 =
          replicate (length Œì‚Çë') true ++ map isLocKnd Œì
            ‚â°‚ü® (cong (_++ map isLocKnd Œì) $ sym $ isLocKnd‚àòinjKndCtx‚â°true Œì‚Çë') ‚ü©
          map isLocKnd (injKndCtx Œì‚Çë') ++ map isLocKnd Œì
            ‚â°‚ü® (sym $ map-++-commute isLocKnd (injKndCtx Œì‚Çë') Œì) ‚ü©
          map isLocKnd (injKndCtx Œì‚Çë' ++ Œì) ‚àé
        eq3 : projTy (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
                (regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
                  (injTy t‚Çë))
              ‚â° t‚Çë
        eq3 =
          projTy (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
            (regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
              (injTy t‚Çë))
            ‚â°‚ü® (cong (Œª x ‚Üí projTy (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
                  (regainTy x (injTy t‚Çë))) eq2) ‚ü©
          projTy (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
            (regainTy (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
              (injTy t‚Çë))
            ‚â°‚ü® proj‚àòregain‚àòinjTy‚âóid {injKndCtx Œì‚Çë' ++ Œì}
                {Œ∫‚Çë} {t‚Çë} $
                (subst (_e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë) eq $
                  ‚ä¢TypFun‚Åª {Œì} {‚Ñì} {Œì‚Çë'} {Œ∫‚Çë , t‚Çë} (‚ä¢‚áí‚ä¢typ C‚ÖÄ ‚ä¢e) .snd) ‚ü©
          t‚Çë ‚àé
        eq4 : map (?isLocalTy (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì))
                (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë'
                  ++ renCtx C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) Œî)
              ‚â° replicate (length (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')) true
                  ++ map (?isLocalTy ‚Ñì) Œî
        eq4 =
          let Œæ = Drop* id (length (injKndCtx Œì‚Çë'))
              ‚Ñì' = renTy C‚ÖÄ‚Çñ Œæ ‚Ñì
              Œî' = renCtx C‚ÖÄ‚Çñ Œæ Œî in
          map (?isLocalTy ‚Ñì') (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë' ++ Œî')
            ‚â°‚ü® map-++-commute (?isLocalTy ‚Ñì') (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë') Œî' ‚ü©
          map (?isLocalTy ‚Ñì') (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
          ++ map (?isLocalTy ‚Ñì') Œî'
            ‚â°‚ü® (sym $ cong (_++ map (?isLocalTy ‚Ñì') Œî') $
                  map-compose {g = ?isLocalTy ‚Ñì'} {TypFun Œì ‚Ñì Œì‚Çë'} Œî‚Çë') ‚ü©
          map (?isLocalTy ‚Ñì' ‚àò TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë'
          ++ map (?isLocalTy ‚Ñì') Œî'
            ‚â°‚ü® (cong (_++ map (?isLocalTy ‚Ñì') Œî') $
                  map-cong (?isLocalTy‚àòTypFun‚â°true Œì ‚Ñì Œì‚Çë') Œî‚Çë') ‚ü©
          map (Œª _ ‚Üí true) Œî‚Çë'
          ++ map (?isLocalTy ‚Ñì') Œî'
            ‚â°‚ü® (cong (_++ map (?isLocalTy ‚Ñì') Œî') $
                  map-const true Œî‚Çë') ‚ü©
          replicate (length Œî‚Çë') true
          ++ map (?isLocalTy ‚Ñì') Œî'
            ‚â°‚ü® (cong (Œª x ‚Üí replicate x true ++ map (?isLocalTy ‚Ñì') Œî') $
                  sym $ length-map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë') ‚ü©
          replicate (length (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')) true
          ++ map (?isLocalTy ‚Ñì') (map (renTyp C‚ÖÄ‚Çñ Œæ) Œî)
            ‚â°‚ü® (sym $ cong (replicate (length (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')) true ++_) $
                map-compose {g = ?isLocalTy ‚Ñì'}
                {renTyp C‚ÖÄ‚Çñ Œæ}
                Œî) ‚ü©
          replicate (length (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')) true
          ++ map (?isLocalTy ‚Ñì' ‚àò renTyp C‚ÖÄ‚Çñ Œæ) Œî
            ‚â°‚ü® (cong (replicate (length (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')) true ++_) $
                map-cong
                  (Œª t‚Çë ‚Üí sym $
                    ?isLocalTy-ren-‚â° ‚Ñì t‚Çë Œæ
                      (Drop*-inj id (length (injKndCtx Œì‚Çë'))))
                  Œî) ‚ü©
          replicate (length (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')) true
          ++ map (?isLocalTy ‚Ñì) Œî ‚àé
    in ‚ä¢‚à∑'
      (ùïÉ .‚ÖÄ‚Çë)
      (‚ä¢proj (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì) ‚ä¢e)
      (‚ä¢projVec ‚Ñì ‚ä¢es)
      (projKndCtx (injKndCtx Œì‚Çë' ++ Œì)
        ‚â°‚ü® projKndCtx-++ (injKndCtx Œì‚Çë') Œì ‚ü©
      projKndCtx (injKndCtx Œì‚Çë') ++ projKndCtx Œì
        ‚â°‚ü® (cong (_++ projKndCtx Œì) $ proj‚àòinjKndCtx‚âóid Œì‚Çë') ‚ü©
      Œì‚Çë' ++ projKndCtx Œì ‚àé)
      (projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
          (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
          (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë'
            ++ renCtx (C‚ÖÄ .‚ÖÄ‚Çñ) (Drop* id (length (injKndCtx Œì‚Çë'))) Œî)
        ‚â°‚ü® projCtx-++ (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
            (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
            (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
            (renCtx (C‚ÖÄ .‚ÖÄ‚Çñ) (Drop* id (length (injKndCtx Œì‚Çë'))) Œî) ‚ü©
      projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
        (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
        (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
      ++ projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
          (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
          (renCtx C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) Œî)
        ‚â°‚ü® (cong (projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
              (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
              (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë') ++_) $
            proj‚àòren‚âóprojRen‚àòprojCtx
                (Drop*-inj (Œª p ‚Üí p) (length (injKndCtx Œì‚Çë')))
                (‚ä¢TyDrop* C‚ÖÄ‚Çñ (‚ä¢TyIdRen C‚ÖÄ‚Çñ) (injKndCtx Œì‚Çë'))
                ‚ä¢Œî ‚Ñì) ‚ü©
      projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
        (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
        (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
      ++ renCtx ‚ÖÄ‚Çë‚Çñ
        (projTyRen Œì (injKndCtx Œì‚Çë' ++ Œì) (Drop* id (length (map LocKnd Œì‚Çë'))))
        (projCtx (map isLocKnd Œì) ‚Ñì Œî)
        ‚â°‚ü® (cong (projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
              (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
              (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë') ++_) $
                ‚ä¢renCtx-‚âóTyRen ‚ÖÄ‚Çë‚Çñ
                  (Drop*-projTyRen (‚ä¢TyIdRen C‚ÖÄ‚Çñ {Œì}) Œì‚Çë')
                  (‚ä¢projCtx ‚Ñì ‚ä¢Œî)) ‚ü©
      projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
        (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
        (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
      ++ renCtx ‚ÖÄ‚Çë‚Çñ (Drop* (projTyRen Œì Œì id) (length (map LocKnd Œì‚Çë'))) (projCtx (map isLocKnd Œì) ‚Ñì Œî)
        ‚â°‚ü® (cong (projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
              (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
              (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë') ++_) $
              renCtx-ext ‚ÖÄ‚Çë‚Çñ
                (subst (Œª x ‚Üí
                    Drop* (projTyRen Œì Œì id) (length (map LocKnd Œì‚Çë')) ‚âó
                    Drop* id x)
                  (length-map LocKnd Œì‚Çë')
                  (Drop*-ext (projTyRenId Œì) (length (map LocKnd Œì‚Çë'))))
                (projCtx (map isLocKnd Œì) ‚Ñì Œî)) ‚ü©
      projCtx (map isLocKnd (injKndCtx Œì‚Çë' ++ Œì))
        (renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))) ‚Ñì)
        (map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
      ++ renCtx ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')) (projCtx (map isLocKnd Œì) ‚Ñì Œî)
        ‚â°‚ü® (cong (_++ renCtx ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')) (projCtx (map isLocKnd Œì) ‚Ñì Œî)) $
            projCtx‚àòTypFun‚âóid Œî‚Çë' Œì‚Çë' ‚ä¢Œî‚Çë') ‚ü©
      Œî‚Çë' ++ renCtx ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')) (projCtx (map isLocKnd Œì) ‚Ñì Œî) ‚àé)
      (length-map LocKnd Œì‚Çë')
      (length-map (TypFun Œì ‚Ñì Œì‚Çë') Œî‚Çë')
      refl
      (cong (Œ∫‚Çë ,_) $ eq3)
      (cong‚ÇÇ (Œª x y ‚Üí proj x y e)
        (sym eq2 ‚àô (cong (Œª x ‚Üí replicate x true ++ map isLocKnd Œì) $ sym $ length-map LocKnd Œì‚Çë'))
        eq4)

ren-Local : (Œæ : Ren) (Œ∫‚Çë : Knd‚Çë) (t‚Çë : CTy) (‚Ñì : CTy) ‚Üí
            renTy C‚ÖÄ‚Çñ Œæ (Local Œ∫‚Çë t‚Çë ‚Ñì) ‚â°
            Local Œ∫‚Çë (renTy C‚ÖÄ‚Çñ Œæ t‚Çë) (renTy C‚ÖÄ‚Çñ Œæ ‚Ñì)
ren-Local Œæ Œ∫‚Çë t‚Çë ‚Ñì = refl

ren-LocalTyp : (Œæ1 Œæ2 : Ren) (‚Ñì : CTy) (t‚Çë : Typ‚Çë) ‚Üí
               renTyp C‚ÖÄ‚Çñ Œæ1 (LocalTyp Œæ2 ‚Ñì t‚Çë) ‚â°
               LocalTyp (Œæ1 ‚Ä¢ Œæ2) (renTy C‚ÖÄ‚Çñ Œæ1 ‚Ñì) t‚Çë
ren-LocalTyp Œæ1 Œæ2 ‚Ñì (Œ∫‚Çë , t‚Çë) =
  cong (Œª x ‚Üí Bnd Œ∫‚Çë , tyConstr (LocalS Œ∫‚Çë) ((x , 0) ‚à∑ (renTy C‚ÖÄ‚Çñ Œæ1 ‚Ñì , 0) ‚à∑ [])) $
  renTy‚Ä¢ C‚ÖÄ‚Çñ Œæ1 Œæ2 (injTy t‚Çë)

--------------------
-- TERM INJECTION --
--------------------

{-
If a local term e has type t‚Çë 
Œì‚Çë ‚®æ Œî‚Çë ‚ä¢‚Çë e : t‚Çë
‚Ñì is a valid location in contex Œì,
and Œæ renames inj Œì‚Çë to Œì,
then there is a corresponding choreographic term
Œì ‚®æ ‚Ñì.Œî‚Çë ‚ä¢ inj ‚Ñì C : t‚Çë
-}
‚ä¢injVar
  : ‚àÄ{Œì‚Çë Œì Œæ Œî‚Çë x t‚Çë ‚Ñì} ‚Üí
    TYREN C‚ÖÄ‚Çñ Œæ (injKndCtx Œì‚Çë) Œì ‚Üí
    Œì c‚ä¢‚Çú ‚Ñì ‚à∂ *‚Çó ‚Üí
    Œì‚Çë ‚®æ Œî‚Çë e‚ä¢var x ‚à∂ t‚Çë ‚Üí
    Œì ‚®æ injCtx Œæ ‚Ñì Œî‚Çë c‚ä¢var x ‚à∂ LocalTyp Œæ ‚Ñì t‚Çë
‚ä¢injVar ‚ä¢Œæ ‚ä¢‚Ñì (‚ä¢0 ‚ä¢Œî‚Çë ‚ä¢t‚Çë) = ‚ä¢0 (‚ä¢injCtx ‚ä¢Œæ ‚ä¢‚Ñì ‚ä¢Œî‚Çë) (‚ä¢Local (‚ä¢renTy C‚ÖÄ‚Çñ ‚ä¢Œæ (‚ä¢injTy ‚ä¢t‚Çë)) ‚ä¢‚Ñì)
‚ä¢injVar ‚ä¢Œæ ‚ä¢‚Ñì (‚ä¢S ‚ä¢x ‚ä¢t2) = ‚ä¢S (‚ä¢injVar ‚ä¢Œæ ‚ä¢‚Ñì ‚ä¢x) (‚ä¢Local (‚ä¢renTy C‚ÖÄ‚Çñ ‚ä¢Œæ (‚ä¢injTy ‚ä¢t2)) ‚ä¢‚Ñì)

inj : Ren ‚Üí CTy ‚Üí Tm‚Çë ‚Üí CTm
injVec : Ren ‚Üí CTy ‚Üí TmVec‚Çë ‚Üí CTmVec

inj Œæ ‚Ñì (var x) = var x
inj Œæ ‚Ñì (constr s‚Çë ts es) =
  constr (LocalTmS s‚Çë) ((‚Ñì , 0) ‚à∑ renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts)) (injVec Œæ ‚Ñì es)

injVec Œæ ‚Ñì [] = []
injVec Œæ ‚Ñì ((e , m , n) ‚à∑ es) =
  (inj (Keep* Œæ m) (renTy C‚ÖÄ‚Çñ (Drop* id m) ‚Ñì) e , m , n) ‚à∑ injVec Œæ ‚Ñì es


‚ä¢inj
  : ‚àÄ{Œì‚Çë Œì Œæ Œî‚Çë e t‚Çë ‚Ñì} ‚Üí
    TYREN C‚ÖÄ‚Çñ Œæ (injKndCtx Œì‚Çë) Œì ‚Üí
    Œì c‚ä¢‚Çú ‚Ñì ‚à∂ *‚Çó ‚Üí
    Œì‚Çë ‚®æ Œî‚Çë e‚ä¢ e ‚à∂ t‚Çë ‚Üí
    Œì ‚®æ injCtx Œæ ‚Ñì Œî‚Çë c‚ä¢ inj Œæ ‚Ñì e ‚à∂ LocalTyp Œæ ‚Ñì t‚Çë
‚ä¢injVec
  : ‚àÄ{Œì‚Çë Œì Œæ Œî‚Çë es Œ£‚Çë ‚Ñì} ‚Üí
    TYREN C‚ÖÄ‚Çñ Œæ (injKndCtx Œì‚Çë) Œì ‚Üí
    Œì c‚ä¢‚Çú ‚Ñì ‚à∂ *‚Çó ‚Üí
    Œì‚Çë ‚®æ Œî‚Çë e‚ä¢vec es ‚à∂ Œ£‚Çë ‚Üí
    Œì ‚®æ injCtx Œæ ‚Ñì Œî‚Çë c‚ä¢vec injVec Œæ ‚Ñì es ‚à∂ map (BinderFun Œì ‚Ñì) (renBinders ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) Œ£‚Çë)

‚ä¢inj ‚ä¢Œæ ‚ä¢‚Ñì (‚ä¢var ‚ä¢x) = ‚ä¢var (‚ä¢injVar ‚ä¢Œæ ‚ä¢‚Ñì ‚ä¢x)
‚ä¢inj {Œì‚Çë} {Œì} {Œæ} {Œî‚Çë} {‚Ñì = ‚Ñì} ‚ä¢Œæ ‚ä¢‚Ñì (‚ä¢constr {ts = ts} {es = es} s‚Çë ‚ä¢ts ‚ä¢es) =
  let eq1 : TmSig‚Çë s‚Çë (projKndCtx Œì) (projTyVec (map isLocKnd Œì) (renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts))) .snd .fst
            ‚â° ùïÉ .‚ÖÄ‚Çë .TmSig s‚Çë Œì‚Çë ts .snd .fst
      eq1 =
        (fst $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì) (projTyVec (map isLocKnd Œì) (renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts))))
          ‚â°‚ü® (cong (fst ‚àò snd ‚àò TmSig‚Çë s‚Çë (projKndCtx Œì)) $
                proj‚àòren‚âóprojRen‚àòprojTyVec ‚ä¢Œæ (‚ä¢injTyVec ‚ä¢ts)) ‚ü©
        (fst $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
          (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
            (projTyVec (map isLocKnd (injKndCtx Œì‚Çë)) (injTyVec ts))))
          ‚â°‚ü® (cong (Œª x ‚Üí fst $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
                (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                  (projTyVec x (injTyVec ts)))) $
              isLocKnd‚àòinjKndCtx‚â°true Œì‚Çë) ‚ü©
        (fst $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
          (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
            (projTyVec (replicate (length Œì‚Çë) true) (injTyVec ts))))
          ‚â°‚ü® (cong (Œª x ‚Üí fst $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
                (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) x)) $
              proj‚àòinjTyVec‚âóid (length Œì‚Çë) ts) ‚ü©
        (fst $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
          (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) ts))
          ‚â°‚ü® cong fst $ ren-comm-TmSig-snd (ùïÉ .‚ÖÄ‚Çë) s‚Çë
              (subst
                (Œª x ‚Üí TYREN ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) x (projKndCtx Œì))
                (proj‚àòinjKndCtx‚âóid Œì‚Çë)
                (‚ä¢projTyRen ‚ä¢Œæ))
              ‚ä¢ts ‚ü©
        (fst $ snd $ TmSig‚Çë s‚Çë Œì‚Çë ts) ‚àé
      eq2 : regainTy (map isLocKnd Œì)
              (injTy (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
                (projTyVec (map isLocKnd Œì) (renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts)))))
            ‚â° renTy C‚ÖÄ‚Çñ Œæ (injTy (snd $ snd $ TmSig‚Çë s‚Çë Œì‚Çë ts))
      eq2 =
        regainTy (map isLocKnd Œì) (injTy
          (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (projTyVec (map isLocKnd Œì) (renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts)))))
          ‚â°‚ü® (cong (Œª x ‚Üí regainTy (map isLocKnd Œì) (injTy
                  (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì) x))) $
              proj‚àòren‚âóprojRen‚àòprojTyVec ‚ä¢Œæ (‚ä¢injTyVec ‚ä¢ts)) ‚ü©
        regainTy (map isLocKnd Œì) (injTy
          (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
              (projTyVec (map isLocKnd (injKndCtx Œì‚Çë)) (injTyVec ts)))))
          ‚â°‚ü® (cong (Œª x ‚Üí regainTy (map isLocKnd Œì) (injTy
                (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
                  (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                    (projTyVec x (injTyVec ts)))))) $
              isLocKnd‚àòinjKndCtx‚â°true Œì‚Çë) ‚ü©
        regainTy (map isLocKnd Œì) (injTy
          (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
              (projTyVec (replicate (length Œì‚Çë) true) (injTyVec ts)))))
          ‚â°‚ü® (cong (Œª x ‚Üí regainTy (map isLocKnd Œì) (injTy
                (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
                  (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) x)))) $
              proj‚àòinjTyVec‚âóid (length Œì‚Çë) ts) ‚ü©
        regainTy (map isLocKnd Œì) (injTy
          (snd $ snd $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) ts)))
          ‚â°‚ü® (cong (Œª x ‚Üí regainTy (map isLocKnd Œì) (injTy (snd x))) $
              ren-comm-TmSig-snd (ùïÉ .‚ÖÄ‚Çë) s‚Çë
                  (subst
                    (Œª x ‚Üí TYREN ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) x (projKndCtx Œì))
                    (proj‚àòinjKndCtx‚âóid Œì‚Çë)
                    (‚ä¢projTyRen ‚ä¢Œæ))
                  ‚ä¢ts) ‚ü©
        regainTy (map isLocKnd Œì) (injTy
          (renTy ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
            (snd $ snd $ TmSig‚Çë s‚Çë Œì‚Çë ts)))
          ‚â°‚ü® regain‚àòinj‚àòprojRen‚âóren‚àòregain‚àòinj {injKndCtx Œì‚Çë} {Œì} {Œæ}
                {snd $ snd $ TmSig‚Çë s‚Çë Œì‚Çë ts}
                ‚ä¢Œæ
                (subst (Œª x ‚Üí wfTyp ‚ÖÄ‚Çë‚Çñ x (snd $ TmSig‚Çë s‚Çë Œì‚Çë ts))
                    (sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë)
                    (ùïÉ .‚ÖÄ‚Çë .‚ä¢TmSig-snd s‚Çë ‚ä¢ts)) ‚ü©
        renTy C‚ÖÄ‚Çñ Œæ
          (regainTy (map isLocKnd (injKndCtx Œì‚Çë))
            (injTy $ snd $ snd $ TmSig‚Çë s‚Çë Œì‚Çë ts))
          ‚â°‚ü® (cong (renTy C‚ÖÄ‚Çñ Œæ) $
                regainTyId $ ‚ä¢injTy $ ùïÉ .‚ÖÄ‚Çë .‚ä¢TmSig-snd s‚Çë ‚ä¢ts) ‚ü©
        renTy C‚ÖÄ‚Çñ Œæ (injTy $ snd $ snd $ TmSig‚Çë s‚Çë Œì‚Çë ts) ‚àé
      eq3 : map (BinderFun Œì ‚Ñì)
              (renBinders ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                (TmSig‚Çë s‚Çë Œì‚Çë ts .fst)) ‚â°
            map (BinderFun Œì ‚Ñì)
              (TmSig‚Çë s‚Çë (projKndCtx Œì)
                (projTyVec (map isLocKnd Œì) (renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts))) .fst)
      eq3 =
        map (BinderFun Œì ‚Ñì)
          (renBinders ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
            (TmSig‚Çë s‚Çë Œì‚Çë ts .fst))
          ‚â°‚ü® (cong (map (BinderFun Œì ‚Ñì)) $
              sym $ ren-comm-TmSig-fst (ùïÉ .‚ÖÄ‚Çë) s‚Çë
              (subst
                (Œª x ‚Üí TYREN ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) x (projKndCtx Œì))
                (proj‚àòinjKndCtx‚âóid Œì‚Çë)
                (‚ä¢projTyRen ‚ä¢Œæ))
              ‚ä¢ts) ‚ü©
        map (BinderFun Œì ‚Ñì)
          (fst $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) ts))
          ‚â°‚ü® (sym $ cong (Œª x ‚Üí map (BinderFun Œì ‚Ñì)
                (fst $ TmSig‚Çë s‚Çë (projKndCtx Œì)
                  (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) x))) $
              proj‚àòinjTyVec‚âóid (length Œì‚Çë) ts) ‚ü©
        map (BinderFun Œì ‚Ñì)
          (fst $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
              (projTyVec (replicate (length Œì‚Çë) true) (injTyVec ts))))
          ‚â°‚ü® (sym $ cong (Œª x ‚Üí map (BinderFun Œì ‚Ñì)
              (fst $ TmSig‚Çë s‚Çë (projKndCtx Œì)
                (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                  (projTyVec x (injTyVec ts))))) $
              isLocKnd‚àòinjKndCtx‚â°true Œì‚Çë) ‚ü©
        map (BinderFun Œì ‚Ñì)
          (fst $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (renTyVec ‚ÖÄ‚Çë‚Çñ (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
              (projTyVec (map isLocKnd (injKndCtx Œì‚Çë)) (injTyVec ts))))
          ‚â°‚ü® (sym $ cong (Œª x ‚Üí map (BinderFun Œì ‚Ñì) (fst $ TmSig‚Çë s‚Çë (projKndCtx Œì) x)) $
             proj‚àòren‚âóprojRen‚àòprojTyVec ‚ä¢Œæ (‚ä¢injTyVec ‚ä¢ts)) ‚ü©
        map (BinderFun Œì ‚Ñì)
          (fst $ TmSig‚Çë s‚Çë (projKndCtx Œì)
            (projTyVec (map isLocKnd Œì) (renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts)))) ‚àé
  in 
  subst
      (Œª x ‚Üí Œì ‚®æ injCtx Œæ ‚Ñì Œî‚Çë c‚ä¢ constr (LocalTmS s‚Çë) ((‚Ñì , 0) ‚à∑ renTyVec C‚ÖÄ‚Çñ Œæ (injTyVec ts)) (injVec Œæ ‚Ñì es) ‚à∂ x)
      (cong‚ÇÇ _,_ (cong Bnd eq1) (cong‚ÇÇ (Œª x y ‚Üí Local x y ‚Ñì) eq1 eq2))
      (‚ä¢constr (LocalTmS s‚Çë)
        (‚ä¢‚Ñì ‚ä¢‚Çú‚à∑ ‚ä¢renTyVec C‚ÖÄ‚Çñ ‚ä¢Œæ (‚ä¢injTyVec ‚ä¢ts))
        (subst (Œì ‚®æ injCtx Œæ ‚Ñì Œî‚Çë c‚ä¢vec injVec Œæ ‚Ñì es ‚à∂_) eq3
          (‚ä¢injVec ‚ä¢Œæ ‚ä¢‚Ñì ‚ä¢es)))

‚ä¢injVec ‚ä¢Œæ ‚ä¢‚Ñì (‚ä¢[] ‚ä¢Œî) = ‚ä¢[] (‚ä¢injCtx ‚ä¢Œæ ‚ä¢‚Ñì ‚ä¢Œî)  
‚ä¢injVec {Œì‚Çë} {Œì} {Œæ} {Œî‚Çë} {‚Ñì = ‚Ñì} ‚ä¢Œæ ‚ä¢‚Ñì (_‚ä¢‚à∑_ {e} {es} {Œì‚Çë'} {Œî‚Çë'} {Œ∫‚Çë , t‚Çë} ‚ä¢e ‚ä¢es) =
  let eq3 : length Œî‚Çë' ‚â°
            length (map (TypFun Œì ‚Ñì Œì‚Çë')
              (map (renTyp ‚ÖÄ‚Çë‚Çñ
                    (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                      (length Œì‚Çë')))
                  Œî‚Çë'))
      eq3 =
        length Œî‚Çë'
          ‚â°‚ü® (sym $ length-map
                (renTyp ‚ÖÄ‚Çë‚Çñ
                (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                  (length Œì‚Çë')))
                  Œî‚Çë') ‚ü©
        length (map (renTyp ‚ÖÄ‚Çë‚Çñ
                (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                  (length Œì‚Çë')))
              Œî‚Çë')
          ‚â°‚ü® (sym $ length-map (TypFun Œì ‚Ñì Œì‚Çë')
                (map (renTyp ‚ÖÄ‚Çë‚Çñ
                (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                  (length Œì‚Çë')))
              Œî‚Çë')) ‚ü©
        length (map (TypFun Œì ‚Ñì Œì‚Çë')
          (map (renTyp ‚ÖÄ‚Çë‚Çñ
                (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                  (length Œì‚Çë')))
              Œî‚Çë')) ‚àé
      ‚ä¢t‚Çë' : ‚àÄ{t‚Çë Œ∫‚Çë} ‚Üí
             (Œì‚Çë' ++ Œì‚Çë) e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë ‚Üí
             (Œì‚Çë' ++ projKndCtx (injKndCtx Œì‚Çë)) e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë              
      ‚ä¢t‚Çë' {t‚Çë} {Œ∫‚Çë} ‚ä¢t‚Çë =
        subst (_e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë)
          (cong (Œì‚Çë' ++_) $ sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë)
          ‚ä¢t‚Çë
      ‚ä¢t‚Çë'' : ‚àÄ{t‚Çë Œ∫‚Çë} ‚Üí
              (Œì‚Çë' ++ Œì‚Çë) e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë ‚Üí
              projKndCtx (injKndCtx Œì‚Çë' ++ injKndCtx Œì‚Çë) e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë
      ‚ä¢t‚Çë'' {t‚Çë} {Œ∫‚Çë} ‚ä¢t‚Çë =
        subst (_e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë)
          (cong‚ÇÇ _++_
            (sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë')
            (sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë)
            ‚àô sym (projKndCtx-++ (injKndCtx Œì‚Çë') (injKndCtx Œì‚Çë))) 
          ‚ä¢t‚Çë
      eq4 : ‚àÄ{t‚Çë Œ∫‚Çë} ‚Üí
            (Œì‚Çë' ++ Œì‚Çë) e‚ä¢‚Çú t‚Çë ‚à∂ Œ∫‚Çë ‚Üí
            renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë')) (injTy t‚Çë) ‚â°
            regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
              (injTy (renTy ‚ÖÄ‚Çë‚Çñ
                (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) (length Œì‚Çë'))
                t‚Çë))
      eq4 {t‚Çë} {Œ∫‚Çë} ‚ä¢t‚Çë =
        renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë')) (injTy t‚Çë)
          ‚â°‚ü® (cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ (Keep* Œæ x) (injTy t‚Çë)) $
                sym $ length-map LocKnd Œì‚Çë') ‚ü©
       renTy C‚ÖÄ‚Çñ (Keep* Œæ (length (injKndCtx Œì‚Çë'))) (injTy t‚Çë)
          ‚â°‚ü® (sym $ ‚ä¢renTy-‚âóTyRen C‚ÖÄ‚Çñ
                (Keep*-‚âóTyRen C‚ÖÄ‚Çñ
                  (regain‚àòinj‚àòprojTyRenVar‚âóid ‚ä¢Œæ)
                  (injKndCtx Œì‚Çë'))
                (subst (_c‚ä¢‚Çú injTy t‚Çë ‚à∂ LocKnd Œ∫‚Çë)
                  (injKndCtx-++ Œì‚Çë' Œì‚Çë) $
                  ‚ä¢injTy ‚ä¢t‚Çë)) ‚ü©
        renTy C‚ÖÄ‚Çñ
          (Keep*
            (regainTyVar (map isLocKnd Œì)
              ‚Ä¢ injTyRen Œì‚Çë (projKndCtx Œì)
                  (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
            (length (injKndCtx Œì‚Çë')))
          (injTy t‚Çë)
          ‚â°‚ü® (cong (Œª x ‚Üí 
                renTy C‚ÖÄ‚Çñ
                  (Keep*
                    (regainTyVar (map isLocKnd Œì)
                      ‚Ä¢ injTyRen Œì‚Çë (projKndCtx Œì)
                          (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                    x)
                  (injTy t‚Çë)) $
            length-map LocKnd Œì‚Çë') ‚ü©
        renTy C‚ÖÄ‚Çñ
          (Keep*
            (regainTyVar (map isLocKnd Œì)
              ‚Ä¢ injTyRen Œì‚Çë (projKndCtx Œì)
                  (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
            (length Œì‚Çë'))
          (injTy t‚Çë)
          ‚â°‚ü® (cong (Œª x ‚Üí 
                  renTy C‚ÖÄ‚Çñ
                    (Keep*
                      (regainTyVar (map isLocKnd Œì)
                        ‚Ä¢ injTyRen x (projKndCtx Œì)
                            (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                      (length Œì‚Çë'))
                    (injTy t‚Çë)) $
                sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë) ‚ü©
        renTy C‚ÖÄ‚Çñ
          (Keep*
            (regainTyVar (map isLocKnd Œì)
              ‚Ä¢ injTyRen (projKndCtx (injKndCtx Œì‚Çë)) (projKndCtx Œì)
                  (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
            (length Œì‚Çë'))
          (injTy t‚Çë)
          ‚â°‚ü® (sym $ renTy-ext C‚ÖÄ‚Çñ
                (Keep*‚Ä¢Keep*
                  (regainTyVar (map isLocKnd Œì))
                  (injTyRen (projKndCtx (injKndCtx Œì‚Çë)) (projKndCtx Œì)
                    (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                    (length Œì‚Çë'))
                (injTy t‚Çë)) ‚ü©
        renTy C‚ÖÄ‚Çñ
          (Keep* (regainTyVar (map isLocKnd Œì)) (length Œì‚Çë')
            ‚Ä¢ Keep*
                (injTyRen (projKndCtx (injKndCtx Œì‚Çë)) (projKndCtx Œì)
                  (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                (length Œì‚Çë'))
          (injTy t‚Çë)                
          ‚â°‚ü® (sym $ renTy‚Ä¢ C‚ÖÄ‚Çñ
                (Keep* (regainTyVar (map isLocKnd Œì)) (length Œì‚Çë'))
                (Keep*
                  (injTyRen (projKndCtx (injKndCtx Œì‚Çë)) (projKndCtx Œì)
                    (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                  (length Œì‚Çë'))
                (injTy t‚Çë)) ‚ü©
        renTy C‚ÖÄ‚Çñ (Keep* (regainTyVar (map isLocKnd Œì)) (length Œì‚Çë'))
          (renTy C‚ÖÄ‚Çñ
            (Keep*
                (injTyRen (projKndCtx (injKndCtx Œì‚Çë)) (projKndCtx Œì)
                  (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                (length Œì‚Çë'))
            (injTy t‚Çë))
          ‚â°‚ü® renTy-ext C‚ÖÄ‚Çñ
                (Keep*-regainTyVar (map isLocKnd Œì) (length Œì‚Çë'))
                (renTy C‚ÖÄ‚Çñ
                  (Keep*
                      (injTyRen (projKndCtx (injKndCtx Œì‚Çë)) (projKndCtx Œì)
                        (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                      (length Œì‚Çë'))
                  (injTy t‚Çë)) ‚ü©
        renTy C‚ÖÄ‚Çñ (regainTyVar (replicate (length Œì‚Çë') true ++ map isLocKnd Œì))
          (renTy C‚ÖÄ‚Çñ
            (Keep*
                (injTyRen (projKndCtx (injKndCtx Œì‚Çë)) (projKndCtx Œì)
                  (projTyRen (injKndCtx Œì‚Çë) Œì Œæ))
                (length Œì‚Çë'))
            (injTy t‚Çë))
          ‚â°‚ü® (cong (regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)) $
              sym $ renTy-ext C‚ÖÄ‚Çñ
                (Keep*-injTyRen
                  (projKndCtx (injKndCtx Œì‚Çë))
                  (projKndCtx Œì)
                  (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                  Œì‚Çë')
                (injTy t‚Çë)) ‚ü©
        regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
          (renTy C‚ÖÄ‚Çñ
            (injTyRen (Œì‚Çë' ++ projKndCtx (injKndCtx Œì‚Çë))
              (Œì‚Çë' ++ projKndCtx Œì)
              (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                (length Œì‚Çë')))
            (injTy t‚Çë))
          ‚â°‚ü® cong‚ÇÇ (Œª x y ‚Üí
                  regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
                    (renTy C‚ÖÄ‚Çñ
                      (injTyRen (Œì‚Çë' ++ projKndCtx (injKndCtx Œì‚Çë))
                        x
                        (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                          y))
                      (injTy t‚Çë)))
                  (cong (_++ projKndCtx Œì) (sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë')
                    ‚àô sym (projKndCtx-++ (injKndCtx Œì‚Çë') Œì))
                  (sym $ length-map LocKnd Œì‚Çë') ‚ü©
        regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
          (renTy C‚ÖÄ‚Çñ
            (injTyRen (Œì‚Çë' ++ projKndCtx (injKndCtx Œì‚Çë))
              (projKndCtx (injKndCtx Œì‚Çë' ++ Œì))
              (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ)
                (length (injKndCtx Œì‚Çë'))))
            (injTy t‚Çë))
          ‚â°‚ü® (cong (regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)) $
                ‚ä¢renTy-‚âóTyRen C‚ÖÄ‚Çñ
                  (‚ä¢injTyRen-ext
                    {Œì2 = projKndCtx (injKndCtx Œì‚Çë' ++ Œì)}
                    (‚âóTyRen-sym ‚ÖÄ‚Çë‚Çñ (Keep*-projTyRen ‚ä¢Œæ Œì‚Çë')))
                  (‚ä¢injTy (‚ä¢t‚Çë' ‚ä¢t‚Çë))) ‚ü©
        regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
          (renTy C‚ÖÄ‚Çñ
            (injTyRen (Œì‚Çë' ++ projKndCtx (injKndCtx Œì‚Çë))
              (projKndCtx (injKndCtx Œì‚Çë' ++ Œì))
              (projTyRen (injKndCtx Œì‚Çë' ++ injKndCtx Œì‚Çë) (injKndCtx Œì‚Çë' ++ Œì)
                (Keep* Œæ (length (injKndCtx Œì‚Çë')))))
            (injTy t‚Çë))
          ‚â°‚ü® (cong (Œª x ‚Üí 
                regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
                  (renTy C‚ÖÄ‚Çñ
                    (injTyRen x
                      (projKndCtx (injKndCtx Œì‚Çë' ++ Œì))
                      (projTyRen (injKndCtx Œì‚Çë' ++ injKndCtx Œì‚Çë) (injKndCtx Œì‚Çë' ++ Œì)
                        (Keep* Œæ (length (injKndCtx Œì‚Çë')))))
                    (injTy t‚Çë))) $
              cong (_++ projKndCtx (injKndCtx Œì‚Çë)) (sym $ proj‚àòinjKndCtx‚âóid Œì‚Çë') 
                ‚àô sym (projKndCtx-++ (injKndCtx Œì‚Çë') (injKndCtx Œì‚Çë))) ‚ü©
        regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
          (renTy C‚ÖÄ‚Çñ
            (injTyRen (projKndCtx (injKndCtx Œì‚Çë' ++ injKndCtx Œì‚Çë))
              (projKndCtx (injKndCtx Œì‚Çë' ++ Œì))
              (projTyRen (injKndCtx Œì‚Çë' ++ injKndCtx Œì‚Çë) (injKndCtx Œì‚Çë' ++ Œì)
                (Keep* Œæ (length (injKndCtx Œì‚Çë')))))
            (injTy t‚Çë))
          ‚â°‚ü® (cong (regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)) $
                sym $ inj‚àòren‚âóinjRen‚àòinjTy
                (‚ä¢projTyRen (‚ä¢TyKeep* C‚ÖÄ‚Çñ ‚ä¢Œæ (injKndCtx Œì‚Çë')))
                (‚ä¢t‚Çë'' ‚ä¢t‚Çë)) ‚ü©
        regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
          (injTy (renTy ‚ÖÄ‚Çë‚Çñ
            (projTyRen
              (injKndCtx Œì‚Çë' ++ injKndCtx Œì‚Çë)
              (injKndCtx Œì‚Çë' ++ Œì)
              (Keep* Œæ (length (injKndCtx Œì‚Çë'))))
            t‚Çë))
          ‚â°‚ü® (cong (regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì) ‚àò injTy ) $
                 ‚ä¢renTy-‚âóTyRen ‚ÖÄ‚Çë‚Çñ
                  (Keep*-projTyRen ‚ä¢Œæ Œì‚Çë')
                  (‚ä¢t‚Çë' ‚ä¢t‚Çë)) ‚ü©
        regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
          (injTy (renTy ‚ÖÄ‚Çë‚Çñ
            (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) (length (injKndCtx Œì‚Çë')))
            t‚Çë))
          ‚â°‚ü® (cong (Œª x ‚Üí regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
                (injTy (renTy ‚ÖÄ‚Çë‚Çñ
                  (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) x)
                  t‚Çë))) $
                length-map LocKnd Œì‚Çë') ‚ü©
        regainTy (replicate (length Œì‚Çë') true ++ map isLocKnd Œì)
          (injTy (renTy ‚ÖÄ‚Çë‚Çñ
            (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) (length Œì‚Çë'))
            t‚Çë)) ‚àé
      ‚ä¢Œî‚Çë' : (Œì‚Çë' ++ Œì‚Çë) e‚ä¢ctx Œî‚Çë'
      ‚ä¢Œî‚Çë' = ‚ä¢ctx-++‚Åª ‚ÖÄ‚Çë‚Çñ Œî‚Çë'
              (renCtx (ùïÉ .‚ÖÄ‚Çë .‚ÖÄ‚Çñ) (Drop* id (length Œì‚Çë')) Œî‚Çë)
              (‚ä¢‚áí‚ä¢ctx (ùïÉ .‚ÖÄ‚Çë) ‚ä¢e) .fst
      ‚ä¢Œî‚Çë : Œì‚Çë e‚ä¢ctx Œî‚Çë
      ‚ä¢Œî‚Çë = ‚ä¢renCtx‚Åª ‚ÖÄ‚Çë‚Çñ (‚ä¢TyDrop‚Åª* ‚ÖÄ‚Çë‚Çñ (‚ä¢TyIdRen‚Åª ‚ÖÄ‚Çë‚Çñ) Œì‚Çë') $
              ‚ä¢ctx-++‚Åª ‚ÖÄ‚Çë‚Çñ Œî‚Çë'
                (renCtx (ùïÉ .‚ÖÄ‚Çë .‚ÖÄ‚Çñ) (Drop* id (length Œì‚Çë')) Œî‚Çë)
                (‚ä¢‚áí‚ä¢ctx (ùïÉ .‚ÖÄ‚Çë) ‚ä¢e) .snd              
      eq1 : map (LocalTyp (Keep* Œæ (length Œì‚Çë'))
                  (renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) ‚Ñì))
              (Œî‚Çë' ++ renCtx ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')) Œî‚Çë)
            ‚â° map (TypFun Œì ‚Ñì Œì‚Çë')
                (renCtx ‚ÖÄ‚Çë‚Çñ
                  (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) (length Œì‚Çë'))
                  Œî‚Çë')
              ++ renCtx C‚ÖÄ‚Çñ
                  (Drop* id (length (injKndCtx Œì‚Çë')))
                  (map (LocalTyp Œæ ‚Ñì) Œî‚Çë)
      eq1 =
          map-++-commute
            ((LocalTyp (Keep* Œæ (length Œì‚Çë'))
              (renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) ‚Ñì)))
            Œî‚Çë'
            (renCtx ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')) Œî‚Çë) ‚àô
            cong‚ÇÇ _++_
              (map (LocalTyp (Keep* Œæ (length Œì‚Çë'))
                  (renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) ‚Ñì))
                Œî‚Çë'
                ‚â°‚ü® map-cong-AllElems (wfTyp ‚ÖÄ‚Çë‚Çñ (Œì‚Çë' ++ Œì‚Çë))
                    (Œª{ (Œ∫‚Çë , t‚Çë) ‚ä¢t‚Çë ‚Üí
                      cong‚ÇÇ (Œª x y ‚Üí Bnd Œ∫‚Çë ,
                            tyConstr (LocalS Œ∫‚Çë) ((x , 0) ‚à∑ (y , 0) ‚à∑ []))
                        (eq4 ‚ä¢t‚Çë)
                        (cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ (Drop* id x) ‚Ñì) $
                            sym $ length-map LocKnd Œì‚Çë') })
                    ‚ä¢Œî‚Çë' ‚ü©
              map
                (TypFun Œì ‚Ñì Œì‚Çë'
                  ‚àò renTyp ‚ÖÄ‚Çë‚Çñ
                      (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) (length Œì‚Çë')))
                Œî‚Çë'
                ‚â°‚ü® map-compose
                    {g = TypFun Œì ‚Ñì Œì‚Çë'}
                    {renTyp ‚ÖÄ‚Çë‚Çñ
                        (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) (length Œì‚Çë'))}
                    Œî‚Çë' ‚ü©
              map (TypFun Œì ‚Ñì Œì‚Çë')
                (renCtx ‚ÖÄ‚Çë‚Çñ
                  (Keep* (projTyRen (injKndCtx Œì‚Çë) Œì Œæ) (length Œì‚Çë'))
                  Œî‚Çë') ‚àé)
              (map (LocalTyp (Keep* Œæ (length Œì‚Çë'))
                  (renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) ‚Ñì))
                    (map (renTyp ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë'))) Œî‚Çë)
                ‚â°‚ü® (sym $ map-compose
                      {g = LocalTyp (Keep* Œæ (length Œì‚Çë'))
                        (renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) ‚Ñì)}
                      {renTyp ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë'))}
                      Œî‚Çë) ‚ü©
              map (LocalTyp (Keep* Œæ (length Œì‚Çë'))
                    (renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) ‚Ñì)
                  ‚àò renTyp ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')))
                Œî‚Çë
                ‚â°‚ü® map-cong-AllElems (wfTyp ‚ÖÄ‚Çë‚Çñ Œì‚Çë)
                    (Œª{ (Œ∫‚Çë , t‚Çë) ‚ä¢t‚Çë ‚Üí
                      cong‚ÇÇ (Œª x y ‚Üí
                            (Bnd Œ∫‚Çë ,
                              tyConstr (LocalS Œ∫‚Çë) ((x , 0) ‚à∑ (y , 0) ‚à∑ [])))
                          (renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë'))
                            (injTy (renTy ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')) t‚Çë))
                            ‚â°‚ü® (cong (renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë'))) $
                                  inj‚àòren‚âóinjRen‚àòinjTy
                                  (‚ä¢TyDrop* ‚ÖÄ‚Çë‚Çñ (‚ä¢TyIdRen ‚ÖÄ‚Çë‚Çñ {Œì‚Çë}) Œì‚Çë')
                                  ‚ä¢t‚Çë) ‚ü©
                          renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë'))
                            (renTy C‚ÖÄ‚Çñ (injTyRen Œì‚Çë (Œì‚Çë' ++ Œì‚Çë) (Drop* id (length Œì‚Çë'))) (injTy t‚Çë))
                            ‚â°‚ü® (cong (renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë'))) $
                                renTy-ext C‚ÖÄ‚Çñ (Drop*-injTyRen Œì‚Çë Œì‚Çë id Œì‚Çë') (injTy t‚Çë)) ‚ü©
                          renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë'))
                            (renTy C‚ÖÄ‚Çñ (Drop* (injTyRen Œì‚Çë Œì‚Çë id) (length Œì‚Çë')) (injTy t‚Çë))
                            ‚â°‚ü® (cong (renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë'))) $
                                renTy-ext C‚ÖÄ‚Çñ (Drop*-ext (injTyRenId Œì‚Çë) (length Œì‚Çë'))
                                  (injTy t‚Çë)) ‚ü©
                          renTy C‚ÖÄ‚Çñ (Keep* Œæ (length Œì‚Çë'))
                            (renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) (injTy t‚Çë))
                            ‚â°‚ü® renTy‚Ä¢ C‚ÖÄ‚Çñ
                                  (Keep* Œæ (length Œì‚Çë'))
                                  (Drop* id (length Œì‚Çë'))
                                  (injTy t‚Çë) ‚ü©
                          renTy C‚ÖÄ‚Çñ
                            (Keep* Œæ (length Œì‚Çë')
                              ‚Ä¢ Drop* id (length Œì‚Çë'))
                            (injTy t‚Çë)
                            ‚â°‚ü® renTy-ext C‚ÖÄ‚Çñ
                                  (Keep*‚Ä¢Drop* Œæ id (length Œì‚Çë'))
                                  (injTy t‚Çë) ‚ü©
                          renTy C‚ÖÄ‚Çñ (Drop* Œæ (length Œì‚Çë')) (injTy t‚Çë)
                            ‚â°‚ü® (sym $ renTy-ext C‚ÖÄ‚Çñ
                                  (Drop*‚Ä¢ id Œæ (length Œì‚Çë'))
                                  (injTy t‚Çë)) ‚ü©
                          renTy C‚ÖÄ‚Çñ
                            (Drop* id (length Œì‚Çë') ‚Ä¢ Œæ)
                            (injTy t‚Çë)
                            ‚â°‚ü® (sym $ cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ (Drop* id x ‚Ä¢ Œæ) (injTy t‚Çë)) $
                                  length-map LocKnd Œì‚Çë') ‚ü©
                          renTy C‚ÖÄ‚Çñ
                            (Drop* id (length (injKndCtx Œì‚Çë')) ‚Ä¢ Œæ)
                            (injTy t‚Çë)
                            ‚â°‚ü® (sym $ renTy‚Ä¢ C‚ÖÄ‚Çñ
                                  (Drop* id (length (injKndCtx Œì‚Çë')))
                                  Œæ
                                  (injTy t‚Çë)) ‚ü©
                          renTy C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë')))
                            (renTy C‚ÖÄ‚Çñ Œæ (injTy t‚Çë)) ‚àé)
                          (cong (Œª x ‚Üí renTy C‚ÖÄ‚Çñ (Drop* id x) ‚Ñì) $
                              sym $ length-map LocKnd Œì‚Çë') })
                    ‚ä¢Œî‚Çë ‚ü©
              map (renTyp C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë')))
                  ‚àò LocalTyp Œæ ‚Ñì)
                Œî‚Çë
                ‚â°‚ü® map-compose
                    {g = renTyp C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë')))}
                    {LocalTyp Œæ ‚Ñì}
                    Œî‚Çë ‚ü©
              map
                (renTyp C‚ÖÄ‚Çñ (Drop* id (length (injKndCtx Œì‚Çë'))))
                (map (LocalTyp Œæ ‚Ñì) Œî‚Çë) ‚àé)
  in ‚ä¢‚à∑' C‚ÖÄ
  (‚ä¢inj {Œì‚Çë' ++ Œì‚Çë} {injKndCtx Œì‚Çë' ++ Œì}
      {Keep* Œæ (length Œì‚Çë')}
      {Œî‚Çë' ++ renCtx ‚ÖÄ‚Çë‚Çñ (Drop* id (length Œì‚Çë')) Œî‚Çë}
      {e} {Œ∫‚Çë , t‚Çë} {renTy C‚ÖÄ‚Çñ (Drop* id (length Œì‚Çë')) ‚Ñì}
      (subst‚ÇÉ (TYREN C‚ÖÄ‚Çñ)
        (cong (Keep* Œæ) $ length-map LocKnd Œì‚Çë')
        (sym $ injKndCtx-++ Œì‚Çë' Œì‚Çë)
        refl
        (‚ä¢TyKeep* C‚ÖÄ‚Çñ ‚ä¢Œæ (injKndCtx Œì‚Çë')))
      (‚ä¢renTy C‚ÖÄ‚Çñ
        (subst (Œª x ‚Üí TYREN C‚ÖÄ‚Çñ x Œì (injKndCtx Œì‚Çë' ++ Œì))
          (cong (Drop* id) $ length-map LocKnd Œì‚Çë') $
          ‚ä¢TyDrop* C‚ÖÄ‚Çñ (‚ä¢TyIdRen C‚ÖÄ‚Çñ) (injKndCtx Œì‚Çë'))
        ‚ä¢‚Ñì)
      ‚ä¢e)
  (‚ä¢injVec ‚ä¢Œæ ‚ä¢‚Ñì ‚ä¢es)
  refl
  eq1
  (sym $ length-map LocKnd Œì‚Çë')
  eq3
  refl
  (cong‚ÇÇ (Œª x y ‚Üí Bnd Œ∫‚Çë , Local Œ∫‚Çë x (renTy C‚ÖÄ‚Çñ (Drop* id y) ‚Ñì))
    (eq4 $ ‚ä¢‚áí‚ä¢typ (ùïÉ .‚ÖÄ‚Çë) ‚ä¢e)
    (sym $ length-map LocKnd Œì‚Çë'))
  refl
