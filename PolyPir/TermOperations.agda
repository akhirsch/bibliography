{-# OPTIONS --safe #-}

open import Level renaming (zero to ‚Ñì-zero; suc to ‚Ñì-suc)
open import Data.Empty
open import Data.Unit
open import Data.Bool
open import Data.Product renaming (proj‚ÇÅ to fst; proj‚ÇÇ to snd) hiding (map)
open import Data.Product.Properties
open import Data.Bool
open import Data.Nat
open import Data.List
open import Data.List.Properties
open import Data.Maybe renaming (map to mmap)
open import Data.Sum renaming (inj‚ÇÅ to inl; inj‚ÇÇ to inr) hiding (map)
open import Relation.Nullary
open import Relation.Binary hiding (_‚áí_)
open import Relation.Binary.PropositionalEquality
open import Function

open ‚â°-Reasoning

open import Common
open import Common
open import KindSignatures
open import TypeSignatures
open import TypeContexts
open import Types
open import Kinding
open import Terms
open import Typing
open import TypeEquality
open import PolyPir.LocalLang

module PolyPir.TermOperations
  -- Location values
  (Loc : Set)
  -- Locations should have decidable equality
  (‚â°-dec-Loc : DecidableEquality Loc)

  -- Local language
  (ùïÉ : LocalLang Loc)
  where

open import PolyPir.ChorTypes Loc ‚â°-dec-Loc ùïÉ
open import PolyPir.ChorTerms Loc ‚â°-dec-Loc ùïÉ

Typ‚Çë = Typ ‚ÖÄ‚Çë‚Çñ

‚â°-dec-ChorKnd : DecidableEquality ChorKnd
‚â°-dec-ChorKnd (LocKnd Œ∫1‚Çë) (LocKnd Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong LocKnd p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) (Bnd Œ∫‚Çë‚ÇÅ) = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) * = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) *‚Çó = no (Œª ())
‚â°-dec-ChorKnd (LocKnd Œ∫‚Çë) *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) (LocKnd Œ∫‚Çë‚ÇÅ) = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫1‚Çë) (Bnd Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong Bnd p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) * = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) *‚Çó = no (Œª ())
‚â°-dec-ChorKnd (Bnd Œ∫‚Çë) *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd * (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd * (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd * * = yes refl
‚â°-dec-ChorKnd * *‚Çó = no (Œª ())
‚â°-dec-ChorKnd * *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd *‚Çó (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çó (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çó * = no (Œª ())
‚â°-dec-ChorKnd *‚Çó *‚Çó = yes refl
‚â°-dec-ChorKnd *‚Çó *‚Çõ = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ (LocKnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ (Bnd Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ * = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ *‚Çó = no (Œª ())
‚â°-dec-ChorKnd *‚Çõ *‚Çõ = yes refl

‚â°-dec-ChorTySymb : DecidableEquality ChorTySymb
‚â°-dec-ChorTySymb (EmbLocalTyS s1‚Çë) (EmbLocalTyS s2‚Çë)
  with ùïÉ .‚â°-dec-TySymb‚Çë s1‚Çë s2‚Çë
... | yes p = yes $ cong EmbLocalTyS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) AtS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) FunS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) SngS = no (Œª ())
‚â°-dec-ChorTySymb (EmbLocalTyS s‚Çë) UnionS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫1‚Çë) (LocalS Œ∫2‚Çë)
  with ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes p = yes $ cong LocalS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) AtS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) FunS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) SngS = no (Œª ())
‚â°-dec-ChorTySymb (LocalS Œ∫‚Çë) UnionS = no (Œª ())
‚â°-dec-ChorTySymb AtS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb AtS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb AtS AtS = yes refl
‚â°-dec-ChorTySymb AtS FunS = no (Œª ())
‚â°-dec-ChorTySymb AtS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb AtS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb AtS EmpS = no (Œª ())
‚â°-dec-ChorTySymb AtS SngS = no (Œª ())
‚â°-dec-ChorTySymb AtS UnionS = no (Œª ())
‚â°-dec-ChorTySymb FunS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb FunS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb FunS AtS = no (Œª ())
‚â°-dec-ChorTySymb FunS FunS = yes refl
‚â°-dec-ChorTySymb FunS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb FunS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb FunS EmpS = no (Œª ())
‚â°-dec-ChorTySymb FunS SngS = no (Œª ())
‚â°-dec-ChorTySymb FunS UnionS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) AtS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) FunS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫1 ‚àÄŒ∫1) (AllS Œ∫2 ‚àÄŒ∫2) with ‚â°-dec-ChorKnd Œ∫1 Œ∫2
... | yes refl = yes $ cong (AllS Œ∫1) $ canAbstract-isProp Œ∫1 ‚àÄŒ∫1 ‚àÄŒ∫2
... | no  ¬¨p   = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) SngS = no (Œª ())
‚â°-dec-ChorTySymb (AllS Œ∫ ‚àÄŒ∫) UnionS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) AtS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) FunS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L1) (LitLocS L2) with ‚â°-dec-Loc L1 L2
... | yes p = yes $ cong LitLocS p
... | no ¬¨p = no Œª{ refl ‚Üí ¬¨p refl }
‚â°-dec-ChorTySymb (LitLocS L) EmpS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) SngS = no (Œª ())
‚â°-dec-ChorTySymb (LitLocS L) UnionS = no (Œª ())
‚â°-dec-ChorTySymb EmpS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb EmpS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb EmpS AtS = no (Œª ())
‚â°-dec-ChorTySymb EmpS FunS = no (Œª ())
‚â°-dec-ChorTySymb EmpS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb EmpS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb EmpS EmpS = yes refl
‚â°-dec-ChorTySymb EmpS SngS = no (Œª ())
‚â°-dec-ChorTySymb EmpS UnionS = no (Œª ())
‚â°-dec-ChorTySymb SngS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb SngS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb SngS AtS = no (Œª ())
‚â°-dec-ChorTySymb SngS FunS = no (Œª ())
‚â°-dec-ChorTySymb SngS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb SngS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb SngS EmpS = no (Œª ())
‚â°-dec-ChorTySymb SngS SngS = yes refl
‚â°-dec-ChorTySymb SngS UnionS = no (Œª ())
‚â°-dec-ChorTySymb UnionS (EmbLocalTyS s‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb UnionS (LocalS Œ∫‚Çë) = no (Œª ())
‚â°-dec-ChorTySymb UnionS AtS = no (Œª ())
‚â°-dec-ChorTySymb UnionS FunS = no (Œª ())
‚â°-dec-ChorTySymb UnionS (AllS Œ∫ ‚àÄŒ∫) = no (Œª ())
‚â°-dec-ChorTySymb UnionS (LitLocS L) = no (Œª ())
‚â°-dec-ChorTySymb UnionS EmpS = no (Œª ())
‚â°-dec-ChorTySymb UnionS SngS = no (Œª ())
‚â°-dec-ChorTySymb UnionS UnionS = yes refl

‚â°-dec-CTy : DecidableEquality CTy
‚â°-dec-CTy = ‚â°-dec-Ty C‚ÖÄ‚Çñ ‚â°-dec-ChorTySymb

-- Predicate for whether a type is of the form t‚Çë @ ‚Ñì
isAtTy : CTy ‚Üí CTyp ‚Üí Set
isAtTy ‚Ñì (Œ∫ , t) = Œ£[ t‚Çë ‚àà _ ] (Œ∫ ‚â° * √ó t ‚â° At t‚Çë ‚Ñì)

dec-isAtTy : (‚Ñì : CTy) (t : CTyp) ‚Üí Dec (isAtTy ‚Ñì t)
dec-isAtTy ‚Ñì (LocKnd Œ∫‚Çë , t) = no Œª ()
dec-isAtTy ‚Ñì (Bnd Œ∫‚Çë , t) = no Œª ()
dec-isAtTy ‚Ñì (* , tyVar x) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (EmbLocalTyS s‚Çë) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (LocalS Œ∫‚Çë) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS []) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ [])) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ [])) with ‚â°-dec-CTy ‚Ñì ‚Ñì'
... | yes refl = yes (t‚Çë , refl , refl)
... | no ¬¨p = no Œª{ (_ , refl , refl) ‚Üí ¬¨p refl }
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ tk ‚à∑ ts)) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , zero) ‚à∑ (‚Ñì' , suc k) ‚à∑ ts)) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr AtS ((t‚Çë , suc k) ‚à∑ ts)) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr FunS ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (AllS Œ∫ ‚àÄŒ∫) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr (LitLocS L) ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr EmpS ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr SngS ts) = no Œª ()
dec-isAtTy ‚Ñì (* , tyConstr UnionS ts) = no Œª ()
dec-isAtTy ‚Ñì (*‚Çó , t) = no Œª ()
dec-isAtTy ‚Ñì (*‚Çõ , t) = no Œª ()

-- Predicate for whether a type is of the form ‚Ñì.t‚Çë
isLocalTy : CTy ‚Üí CTyp ‚Üí Set
isLocalTy ‚Ñì (Œ∫ , t) = Œ£[ Œ∫‚Çë ‚àà _ ] Œ£[ t‚Çë ‚àà _ ] (Œ∫ ‚â° Bnd Œ∫‚Çë √ó t ‚â° Local Œ∫‚Çë t‚Çë ‚Ñì)

dec-isLocalTy : (‚Ñì : CTy) (t : CTyp) ‚Üí Dec (isLocalTy ‚Ñì t)
dec-isLocalTy ‚Ñì (LocKnd Œ∫‚Çë , t) = no Œª ()
dec-isLocalTy ‚Ñì (* , t) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyVar x) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (EmbLocalTyS s‚Çë) ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr AtS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) []) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ [])) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ []))
  with ‚â°-dec-CTy ‚Ñì ‚Ñì' | ùïÉ .‚â°-dec-Knd‚Çë Œ∫1‚Çë Œ∫2‚Çë
... | yes refl | yes refl = yes (Œ∫1‚Çë , t‚Çë , refl , refl)
... | yes p    | no  ¬¨q   = no Œª{ (_ , _ , refl , refl) ‚Üí ¬¨q refl }
... | no ¬¨p    | _        = no Œª{ (_ , _ , refl , refl) ‚Üí ¬¨p refl }
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ (‚Ñì' , zero) ‚à∑ tk ‚à∑ ts)) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , zero) ‚à∑ (‚Ñì' , suc k) ‚à∑ ts)) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LocalS Œ∫2‚Çë) ((t‚Çë , suc k) ‚à∑ ts)) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr FunS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (AllS Œ∫ ‚àÄŒ∫) ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr (LitLocS L) ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr EmpS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr SngS ts) = no Œª ()
dec-isLocalTy ‚Ñì (Bnd Œ∫1‚Çë , tyConstr UnionS ts) = no Œª ()
dec-isLocalTy ‚Ñì (*‚Çó , t) = no Œª ()
dec-isLocalTy ‚Ñì (*‚Çõ , t) = no Œª ()

{-
Context projection

Projects a choreographic context to a local context at ‚Ñì
by keeping all types of the form ‚Ñì.t‚Çë

proj ‚Ñì [] = []
proj ‚Ñì (‚Ñì.t‚Çë ‚à∑ Œî) = t‚Çë ‚à∑ proj ‚Ñì Œî
proj ‚Ñì (t ‚à∑ Œî) = proj ‚Ñì Œî
-}
projCtx : ChorKndCtx ‚Üí CTy ‚Üí ChorCtx ‚Üí Ctx‚Çë
projCtx Œì ‚Ñì [] = []
projCtx Œì ‚Ñì (t ‚à∑ Œî) with dec-isLocalTy ‚Ñì t
... | yes (Œ∫‚Çë , t‚Çë , _ , _) = (Œ∫‚Çë , projTy (map isLocKnd Œì) t‚Çë) ‚à∑ projCtx Œì ‚Ñì Œî
... | no ¬¨p = projCtx Œì ‚Ñì Œî

_c‚ä¢ctx_ : ChorKndCtx ‚Üí ChorCtx ‚Üí Set
_c‚ä¢ctx_ = wfCtx C‚ÖÄ‚Çñ

_e‚ä¢ctx_ : KndCtx‚Çë ‚Üí Ctx‚Çë ‚Üí Set
_e‚ä¢ctx_ = wfCtx ‚ÖÄ‚Çë‚Çñ


{-
Projecting preserves context well-formedness

Œì ‚ä¢ Œî
--------
Œì‚à£ ‚ä¢ Œî‚à£‚Ñì
-}
‚ä¢projCtx : ‚àÄ{Œì Œî} ‚Üí
           (‚Ñì : CTy) ‚Üí
           Œì c‚ä¢ctx Œî ‚Üí
           projKndCtx Œì e‚ä¢ctx projCtx Œì ‚Ñì Œî
‚ä¢projCtx {Œî = []} ‚Ñì tt = tt
‚ä¢projCtx {Œî = t ‚à∑ Œî} ‚Ñì (‚ä¢t , ‚ä¢Œî) with dec-isLocalTy ‚Ñì t
... | yes (Œ∫‚Çë , t‚Çë , refl , refl) =
  (‚ä¢projTy $ ‚ä¢Local‚Åª ‚ä¢t .fst) , ‚ä¢projCtx ‚Ñì ‚ä¢Œî
... | no ¬¨p = ‚ä¢projCtx ‚Ñì ‚ä¢Œî

-- Projecting distributes over concatenation
projCtx-++ : (Œì : ChorKndCtx) (‚Ñì : CTy) (Œî1 Œî2 : ChorCtx) ‚Üí
             projCtx Œì ‚Ñì (Œî1 ++ Œî2) ‚â° projCtx Œì ‚Ñì Œî1 ++ projCtx Œì ‚Ñì Œî2
projCtx-++ Œì ‚Ñì [] Œî2 = refl
projCtx-++ Œì ‚Ñì (t ‚à∑ Œî1) Œî2 with dec-isLocalTy ‚Ñì t
... | yes (Œ∫‚Çë , t‚Çë , refl , refl) =
  cong ((Œ∫‚Çë , projTy (map isLocKnd Œì) t‚Çë) ‚à∑_) $
  projCtx-++ Œì ‚Ñì Œî1 Œî2
... | no ¬¨p = projCtx-++ Œì ‚Ñì Œî1 Œî2

LocalTyp : (‚Ñì : CTy) (t‚Çë : Typ‚Çë) ‚Üí CTyp
LocalTyp ‚Ñì (Œ∫‚Çë , t‚Çë) = Bnd Œ∫‚Çë , Local Œ∫‚Çë (injTy t‚Çë) ‚Ñì

LocalTyp-isLocalTy : (‚Ñì : CTy) (t‚Çë : Typ‚Çë) ‚Üí  isLocalTy ‚Ñì (LocalTyp ‚Ñì t‚Çë)
LocalTyp-isLocalTy ‚Ñì (Œ∫‚Çë , t‚Çë) = Œ∫‚Çë , injTy t‚Çë , refl , refl

{-
Context injection

Injects a local context to a choreographic context by converting
every local type t‚Çë to the type ‚Ñì.t‚Çë

inj ‚Ñì [] = []
inj ‚Ñì (t‚Çë ‚à∑ Œî‚Çë) = ‚Ñì.t‚Çë ‚à∑ inj Œî‚Çë
-}
injCtx : CTy ‚Üí Ctx‚Çë ‚Üí ChorCtx
injCtx ‚Ñì Œî = map (LocalTyp ‚Ñì) Œî

{-
Injecting preserves context well-formedness

Œì‚Çë ‚ä¢‚Çë Œî‚Çë
?.Œì‚Çë ‚ä¢ ‚Ñì : *‚Çó
-------------
?.Œì‚Çë ‚ä¢ ‚Ñì.Œî‚Çë
-}
‚ä¢injCtx : ‚àÄ{Œì‚Çë Œî‚Çë ‚Ñì} ‚Üí
           injKndCtx Œì‚Çë c‚ä¢‚Çú ‚Ñì ‚à∂ *‚Çó ‚Üí
           Œì‚Çë e‚ä¢ctx Œî‚Çë ‚Üí
           injKndCtx Œì‚Çë c‚ä¢ctx injCtx ‚Ñì Œî‚Çë
‚ä¢injCtx {Œî‚Çë = []} ‚ä¢‚Ñì tt = tt 
‚ä¢injCtx {Œî‚Çë = (Œ∫‚Çë , t‚Çë) ‚à∑ Œî‚Çë} ‚ä¢‚Ñì (‚ä¢t‚Çë , ‚ä¢Œî‚Çë) =
  ‚ä¢Local (‚ä¢injTy ‚ä¢t‚Çë) ‚ä¢‚Ñì , ‚ä¢injCtx ‚ä¢‚Ñì ‚ä¢Œî‚Çë

-- Injecting distributes over concatenation
injCtx-++ : (‚Ñì : CTy) (Œî1‚Çë Œî2‚Çë : Ctx‚Çë) ‚Üí
             injCtx ‚Ñì (Œî1‚Çë ++ Œî2‚Çë) ‚â° injCtx ‚Ñì Œî1‚Çë ++ injCtx ‚Ñì Œî2‚Çë
injCtx-++ ‚Ñì Œî1 Œî2 = map-++-commute (LocalTyp ‚Ñì) Œî1 Œî2

-- Projecting after injecting a context has no effect
proj‚àòinjCtx‚âóid : (Œì‚Çë : KndCtx‚Çë) (‚Ñì : CTy) ‚Üí projCtx (injKndCtx Œì‚Çë) ‚Ñì ‚àò injCtx ‚Ñì ‚âó id
proj‚àòinjCtx‚âóid Œì‚Çë ‚Ñì [] = refl
proj‚àòinjCtx‚âóid Œì‚Çë ‚Ñì ((Œ∫‚Çë , t‚Çë) ‚à∑ Œî‚Çë) with dec-isLocalTy ‚Ñì (LocalTyp ‚Ñì (Œ∫‚Çë , t‚Çë))
... | yes (_ , _ , refl , refl) =
  cong‚ÇÇ (Œª x y ‚Üí (Œ∫‚Çë , x) ‚à∑ y)
    (subst (Œª x ‚Üí projTy x (injTy t‚Çë) ‚â° t‚Çë)
        (sym $ isLocKnd‚àòinjKndCtx‚â°true Œì‚Çë)
        (proj‚àòinjTy‚âóid (length Œì‚Çë) t‚Çë))
    (proj‚àòinjCtx‚âóid Œì‚Çë ‚Ñì Œî‚Çë)
... | no ¬¨p = ‚ä•-elim $ ¬¨p $ LocalTyp-isLocalTy ‚Ñì (Œ∫‚Çë , t‚Çë)
